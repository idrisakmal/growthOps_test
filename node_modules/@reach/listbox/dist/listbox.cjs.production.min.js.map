{"version":3,"file":"listbox.cjs.production.min.js","sources":["../src/machine.ts","../src/index.tsx"],"sourcesContent":["import { assign, MachineEventWithRefs, StateMachine } from \"@reach/machine\";\nimport { getOwnerDocument } from \"@reach/utils\";\nimport { ListboxDescendant, ListboxValue } from \"./index\";\n\n////////////////////////////////////////////////////////////////////////////////\n// States\n\nexport enum ListboxStates {\n  // Resting/closed state.\n  Idle = \"IDLE\",\n\n  // Listbox is open but the user is not yet navigating.\n  Open = \"OPEN\",\n\n  // The user is navigating the list\n  Navigating = \"NAVIGATING\",\n\n  // The user has moused-down but hasn't made a selection yet\n  Dragging = \"DRAGGING\",\n\n  // The user is interacting with arbitrary elements inside the popover\n  Interacting = \"INTERACTING\",\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Events\n\nexport enum ListboxEvents {\n  ButtonMouseDown = \"BUTTON_MOUSE_DOWN\",\n  ButtonMouseUp = \"BUTTON_MOUSE_UP\",\n  Blur = \"BLUR\",\n  ClearNavSelection = \"CLEAR_NAV_SELECTION\",\n  ClearTypeahead = \"CLEAR_TYPEAHEAD\",\n  GetDerivedData = \"GET_DERIVED_DATA\",\n  KeyDownEscape = \"KEY_DOWN_ESCAPE\",\n  KeyDownEnter = \"KEY_DOWN_ENTER\",\n  KeyDownSpace = \"KEY_DOWN_SPACE\",\n  KeyDownNavigate = \"KEY_DOWN_NAVIGATE\",\n  KeyDownSearch = \"KEY_DOWN_SEARCH\",\n  KeyDownTab = \"KEY_DOWN_TAB\",\n  KeyDownShiftTab = \"KEY_DOWN_SHIFT_TAB\",\n  OptionTouchStart = \"OPTION_TOUCH_START\",\n  OptionMouseMove = \"OPTION_MOUSE_MOVE\",\n  OptionMouseEnter = \"OPTION_MOUSE_ENTER\",\n  OutsideMouseDown = \"OUTSIDE_MOUSE_DOWN\",\n  OutsideMouseUp = \"OUTSIDE_MOUSE_UP\",\n\n  // Uncontrolled value changes come from specific events (click, key, etc.)\n  // ValueChange > Value change may have come from somewhere else\n  ValueChange = \"VALUE_CHANGE\",\n\n  OptionMouseDown = \"OPTION_MOUSE_DOWN\",\n  OptionMouseUp = \"OPTION_MOUSE_UP\",\n  PopoverPointerDown = \"POPOVER_POINTER_DOWN\",\n  PopoverPointerUp = \"POPOVER_POINTER_UP\",\n  UpdateAfterTypeahead = \"UPDATE_AFTER_TYPEAHEAD\",\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Actions and conditions\n\nlet clearNavigationValue = assign<ListboxStateData>({\n  navigationValue: null,\n});\n\nlet clearTypeahead = assign<ListboxStateData>({\n  typeaheadQuery: null,\n});\n\nlet assignValue = assign<ListboxStateData, any>({\n  value: (_, event) => event.value,\n});\n\nlet navigate = assign<ListboxStateData, any>({\n  navigationValue: (data, event) => event.value,\n});\n\nlet navigateFromCurrentValue = assign<ListboxStateData, any>({\n  navigationValue: (data) => {\n    // Before we navigate based on the current value, we need to make sure the\n    // current value is selectable. If not, we should instead navigate to the\n    // first selectable option.\n    let selected = findOptionFromValue(data.value, data.options);\n    if (selected && !selected.disabled) {\n      return data.value;\n    } else {\n      return data.options.find((option) => !option.disabled)?.value || null;\n    }\n  },\n});\n\nfunction listboxLostFocus(data: ListboxStateData, event: ListboxEvent) {\n  if (event.type === ListboxEvents.Blur) {\n    let { list, popover } = event.refs;\n    let { relatedTarget } = event;\n\n    let ownerDocument = (popover && getOwnerDocument(popover)) || document;\n\n    return !!(\n      ownerDocument.activeElement !== list &&\n      popover &&\n      !popover.contains(\n        (relatedTarget as Element) || ownerDocument.activeElement\n      )\n    );\n  }\n  return false;\n}\n\nfunction clickedOutsideOfListbox(data: ListboxStateData, event: ListboxEvent) {\n  if (\n    event.type === ListboxEvents.OutsideMouseDown ||\n    event.type === ListboxEvents.OutsideMouseUp\n  ) {\n    let { button, popover } = event.refs;\n    let { relatedTarget } = event;\n\n    // Close the popover IF:\n    return !!(\n      // clicked element is not the button\n      (\n        relatedTarget !== button &&\n        // clicked element is not inside the button\n        button &&\n        !button.contains(relatedTarget as Element) &&\n        // clicked element is not inside the popover\n        popover &&\n        !popover.contains(relatedTarget as Element)\n      )\n    );\n  }\n  return false;\n}\n\nfunction optionIsActive(data: ListboxStateData, event: any) {\n  return !!data.options.find((option) => option.value === data.navigationValue);\n}\n\nfunction shouldNavigate(data: ListboxStateData, event: any) {\n  let { popover, list } = event.refs;\n  let { relatedTarget } = event;\n  // When a blur event happens, we want to move to Navigating state unless the\n  // user is interacting with elements inside the popover...\n  if (\n    popover &&\n    relatedTarget &&\n    popover.contains(relatedTarget as Element) &&\n    relatedTarget !== list\n  ) {\n    return false;\n  }\n  // ...otherwise, just make sure the next option is selectable\n  return optionIsActive(data, event);\n}\n\nfunction focusList(data: ListboxStateData, event: any) {\n  requestAnimationFrame(() => {\n    event.refs.list && event.refs.list.focus();\n  });\n}\n\nfunction focusButton(data: ListboxStateData, event: any) {\n  event.refs.button && event.refs.button.focus();\n}\n\nfunction listboxIsNotDisabled(data: ListboxStateData, event: any) {\n  return !event.disabled;\n}\n\nfunction optionIsNavigable(data: ListboxStateData, event: ListboxEvent) {\n  if (event.type === ListboxEvents.OptionTouchStart) {\n    if (event && event.disabled) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction optionIsSelectable(data: ListboxStateData, event: any) {\n  if (event && event.disabled) {\n    return false;\n  }\n  return data.navigationValue != null;\n}\n\nfunction selectOption(data: ListboxStateData, event: any) {\n  event.callback && event.callback(event.value);\n}\n\nfunction submitForm(data: ListboxStateData, event: any) {\n  if (event.type !== ListboxEvents.KeyDownEnter) {\n    return;\n  }\n\n  // So this one is a little weird, but here's what we're doing.\n  // When a user presses Enter in the context of a form, the form\n  // should submit. Now I know you're probably thinking:\n  //\n  //      \"Aha! I've got it!\"\n  //          > inputNode.form.submit()\n  //      ** cracks knuckles ** \"Phew. My work here is done.\"\n  //\n  // But alas, we are not so lucky. What's really happening when a\n  // user presses enter in a normal form field is that the browser\n  // looks at the form the input is in, then looks for the first\n  // button or input in that form where its type property is `submit`,\n  // then it triggers a click event on that button. COOL, CARRY ON.\n  //\n  // If we were to fire inputNode.form.submit(), this would bypass any\n  // onSubmit handler in the form and just do what the browser\n  // normally does when you submit a form and trigger a page refresh.\n  // No bueno. So we do what the browser does and just go on a duck\n  // hunt for the first submit button in the form and we click that\n  // sucker.\n  let { hiddenInput } = event.refs;\n  if (hiddenInput && hiddenInput.form) {\n    let submitButton = hiddenInput.form.querySelector(\"button,[type='submit']\");\n    submitButton && (submitButton as any).click();\n  }\n}\n\nlet setTypeahead = assign<ListboxStateData, any>({\n  typeaheadQuery: (data, event) => {\n    return (data.typeaheadQuery || \"\") + event.query;\n  },\n});\n\nlet setValueFromTypeahead = assign<ListboxStateData, ListboxEvent>({\n  value: (data, event) => {\n    if (event.type === ListboxEvents.UpdateAfterTypeahead && event.query) {\n      let match = findOptionFromTypeahead(data.options, event.query);\n      if (match && !match.disabled) {\n        event.callback && event.callback(match.value);\n        return match.value;\n      }\n    }\n    return data.value;\n  },\n});\n\nlet setNavSelectionFromTypeahead = assign<ListboxStateData, ListboxEvent>({\n  navigationValue: (data, event) => {\n    if (event.type === ListboxEvents.UpdateAfterTypeahead && event.query) {\n      let match = findOptionFromTypeahead(data.options, event.query);\n      if (match && !match.disabled) {\n        return match.value;\n      }\n    }\n    return data.navigationValue;\n  },\n});\n\nlet commonEvents = {\n  [ListboxEvents.GetDerivedData]: {\n    actions: assign<ListboxStateData, any>((ctx, event) => {\n      return {\n        ...ctx,\n        ...event.data,\n      };\n    }),\n  },\n  [ListboxEvents.ValueChange]: {\n    actions: [assignValue, selectOption],\n  },\n};\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Initializer for our state machine.\n *\n * @param initial\n * @param props\n */\nexport const createMachineDefinition = ({\n  value,\n}: {\n  value: ListboxValue | null;\n}): StateMachine.Config<ListboxStateData, ListboxEvent, ListboxState> => ({\n  id: \"listbox\",\n  initial: ListboxStates.Idle,\n  context: {\n    value,\n    options: [],\n    navigationValue: null,\n    typeaheadQuery: null,\n  },\n  states: {\n    [ListboxStates.Idle]: {\n      on: {\n        ...commonEvents,\n        [ListboxEvents.ButtonMouseDown]: {\n          target: ListboxStates.Open,\n          actions: [navigateFromCurrentValue],\n          cond: listboxIsNotDisabled,\n        },\n        [ListboxEvents.KeyDownSpace]: {\n          target: ListboxStates.Navigating,\n          actions: [navigateFromCurrentValue, focusList],\n          cond: listboxIsNotDisabled,\n        },\n        [ListboxEvents.KeyDownSearch]: {\n          target: ListboxStates.Idle,\n          actions: setTypeahead,\n          cond: listboxIsNotDisabled,\n        },\n        [ListboxEvents.UpdateAfterTypeahead]: {\n          target: ListboxStates.Idle,\n          actions: [setValueFromTypeahead],\n          cond: listboxIsNotDisabled,\n        },\n        [ListboxEvents.ClearTypeahead]: {\n          target: ListboxStates.Idle,\n          actions: clearTypeahead,\n        },\n        [ListboxEvents.KeyDownNavigate]: {\n          target: ListboxStates.Navigating,\n          actions: [navigateFromCurrentValue, clearTypeahead, focusList],\n          cond: listboxIsNotDisabled,\n        },\n        [ListboxEvents.KeyDownEnter]: {\n          actions: [submitForm],\n          cond: listboxIsNotDisabled,\n        },\n      },\n    },\n    [ListboxStates.Interacting]: {\n      entry: [clearNavigationValue],\n      on: {\n        ...commonEvents,\n        [ListboxEvents.ClearNavSelection]: {\n          actions: [clearNavigationValue, focusList],\n        },\n        [ListboxEvents.KeyDownEnter]: {\n          target: ListboxStates.Idle,\n          actions: [assignValue, clearTypeahead, focusButton, selectOption],\n          cond: optionIsSelectable,\n        },\n        [ListboxEvents.KeyDownSpace]: {\n          target: ListboxStates.Idle,\n          actions: [assignValue, clearTypeahead, focusButton, selectOption],\n          cond: optionIsSelectable,\n        },\n        [ListboxEvents.ButtonMouseDown]: {\n          target: ListboxStates.Idle,\n          // When the user triggers a mouseDown event on the button, we call\n          // event.preventDefault() because the browser will naturally send a\n          // mouseup event and click, which will reopen the button (which we\n          // don't want). As such, the click won't blur the open list or\n          // re-focus the trigger, so we call `focusButton` to do that manually.\n          // We could work around this with deferred transitions with xstate,\n          // but @xstate/fsm currently doesn't support that feature and this\n          // works good enough for the moment.\n          actions: [focusButton],\n        },\n        [ListboxEvents.KeyDownEscape]: {\n          target: ListboxStates.Idle,\n          actions: [focusButton],\n        },\n        [ListboxEvents.OptionMouseDown]: {\n          target: ListboxStates.Dragging,\n        },\n        [ListboxEvents.OutsideMouseDown]: [\n          {\n            target: ListboxStates.Idle,\n            cond: clickedOutsideOfListbox,\n            actions: clearTypeahead,\n          },\n          {\n            target: ListboxStates.Dragging,\n            actions: clearTypeahead,\n            cond: optionIsActive,\n          },\n        ],\n        [ListboxEvents.OutsideMouseUp]: [\n          {\n            target: ListboxStates.Idle,\n            cond: clickedOutsideOfListbox,\n            actions: clearTypeahead,\n          },\n          {\n            target: ListboxStates.Navigating,\n            cond: optionIsActive,\n          },\n          {\n            target: ListboxStates.Interacting,\n            actions: clearTypeahead,\n          },\n        ],\n        [ListboxEvents.KeyDownEnter]: ListboxStates.Interacting,\n        [ListboxEvents.Blur]: [\n          {\n            target: ListboxStates.Idle,\n            cond: listboxLostFocus,\n            actions: clearTypeahead,\n          },\n          {\n            target: ListboxStates.Navigating,\n            cond: shouldNavigate,\n          },\n          {\n            target: ListboxStates.Interacting,\n            actions: clearTypeahead,\n          },\n        ],\n        [ListboxEvents.OptionTouchStart]: {\n          target: ListboxStates.Navigating,\n          actions: [navigate, clearTypeahead],\n          cond: optionIsNavigable,\n        },\n        [ListboxEvents.OptionMouseEnter]: {\n          target: ListboxStates.Navigating,\n          actions: [navigate, clearTypeahead],\n          cond: optionIsNavigable,\n        },\n        [ListboxEvents.KeyDownNavigate]: {\n          target: ListboxStates.Navigating,\n          actions: [navigate, clearTypeahead, focusList],\n        },\n      },\n    },\n    [ListboxStates.Open]: {\n      on: {\n        ...commonEvents,\n        [ListboxEvents.ClearNavSelection]: {\n          actions: [clearNavigationValue],\n        },\n        [ListboxEvents.KeyDownEnter]: {\n          target: ListboxStates.Idle,\n          actions: [assignValue, clearTypeahead, focusButton, selectOption],\n          cond: optionIsSelectable,\n        },\n        [ListboxEvents.KeyDownSpace]: {\n          target: ListboxStates.Idle,\n          actions: [assignValue, clearTypeahead, focusButton, selectOption],\n          cond: optionIsSelectable,\n        },\n        [ListboxEvents.ButtonMouseDown]: {\n          target: ListboxStates.Idle,\n          actions: [focusButton],\n        },\n        [ListboxEvents.KeyDownEscape]: {\n          target: ListboxStates.Idle,\n          actions: [focusButton],\n        },\n        [ListboxEvents.OptionMouseDown]: {\n          target: ListboxStates.Dragging,\n        },\n        [ListboxEvents.OutsideMouseDown]: [\n          {\n            target: ListboxStates.Idle,\n            cond: clickedOutsideOfListbox,\n            actions: clearTypeahead,\n          },\n          {\n            target: ListboxStates.Dragging,\n            cond: optionIsActive,\n          },\n          {\n            target: ListboxStates.Interacting,\n            actions: clearTypeahead,\n          },\n        ],\n        [ListboxEvents.OutsideMouseUp]: [\n          {\n            target: ListboxStates.Idle,\n            cond: clickedOutsideOfListbox,\n            actions: clearTypeahead,\n          },\n          {\n            target: ListboxStates.Navigating,\n            cond: optionIsActive,\n          },\n          {\n            target: ListboxStates.Interacting,\n            actions: clearTypeahead,\n          },\n        ],\n        [ListboxEvents.Blur]: [\n          {\n            target: ListboxStates.Idle,\n            cond: listboxLostFocus,\n            actions: clearTypeahead,\n          },\n          {\n            target: ListboxStates.Navigating,\n            cond: shouldNavigate,\n          },\n          {\n            target: ListboxStates.Interacting,\n            actions: clearTypeahead,\n          },\n        ],\n        [ListboxEvents.ButtonMouseUp]: {\n          target: ListboxStates.Navigating,\n          actions: [navigateFromCurrentValue, focusList],\n        },\n        [ListboxEvents.OptionTouchStart]: {\n          target: ListboxStates.Navigating,\n          actions: [navigate, clearTypeahead],\n          cond: optionIsNavigable,\n        },\n        [ListboxEvents.KeyDownNavigate]: {\n          target: ListboxStates.Navigating,\n          actions: [navigate, clearTypeahead, focusList],\n        },\n        [ListboxEvents.KeyDownSearch]: {\n          target: ListboxStates.Navigating,\n          actions: setTypeahead,\n        },\n        [ListboxEvents.UpdateAfterTypeahead]: {\n          actions: [setNavSelectionFromTypeahead],\n        },\n        [ListboxEvents.ClearTypeahead]: {\n          actions: clearTypeahead,\n        },\n        [ListboxEvents.OptionMouseMove]: [\n          {\n            target: ListboxStates.Dragging,\n            actions: [navigate],\n            cond: optionIsNavigable,\n          },\n          {\n            target: ListboxStates.Dragging,\n          },\n        ],\n      },\n    },\n    [ListboxStates.Dragging]: {\n      on: {\n        ...commonEvents,\n        [ListboxEvents.ClearNavSelection]: {\n          actions: [clearNavigationValue],\n        },\n        [ListboxEvents.KeyDownEnter]: {\n          target: ListboxStates.Idle,\n          actions: [assignValue, clearTypeahead, focusButton, selectOption],\n          cond: optionIsSelectable,\n        },\n        [ListboxEvents.KeyDownSpace]: {\n          target: ListboxStates.Idle,\n          actions: [assignValue, clearTypeahead, focusButton, selectOption],\n          cond: optionIsSelectable,\n        },\n        [ListboxEvents.ButtonMouseDown]: {\n          target: ListboxStates.Idle,\n          actions: [focusButton],\n        },\n        [ListboxEvents.KeyDownEscape]: {\n          target: ListboxStates.Idle,\n          actions: [focusButton],\n        },\n        [ListboxEvents.OptionMouseDown]: {\n          target: ListboxStates.Dragging,\n        },\n        [ListboxEvents.OutsideMouseDown]: [\n          {\n            target: ListboxStates.Idle,\n            cond: clickedOutsideOfListbox,\n            actions: clearTypeahead,\n          },\n          {\n            target: ListboxStates.Navigating,\n            cond: optionIsActive,\n          },\n          {\n            target: ListboxStates.Interacting,\n            actions: clearTypeahead,\n          },\n        ],\n        [ListboxEvents.OutsideMouseUp]: [\n          {\n            target: ListboxStates.Idle,\n            cond: clickedOutsideOfListbox,\n            actions: clearTypeahead,\n          },\n          {\n            target: ListboxStates.Navigating,\n            cond: optionIsActive,\n            actions: focusList,\n          },\n          {\n            target: ListboxStates.Interacting,\n            actions: [clearTypeahead, focusList],\n          },\n        ],\n        [ListboxEvents.Blur]: [\n          {\n            target: ListboxStates.Idle,\n            cond: listboxLostFocus,\n            actions: clearTypeahead,\n          },\n          {\n            target: ListboxStates.Navigating,\n            cond: shouldNavigate,\n          },\n          {\n            target: ListboxStates.Interacting,\n            actions: clearTypeahead,\n          },\n        ],\n\n        [ListboxEvents.ButtonMouseUp]: {\n          target: ListboxStates.Navigating,\n          actions: [navigateFromCurrentValue, focusList],\n        },\n        [ListboxEvents.OptionTouchStart]: {\n          target: ListboxStates.Navigating,\n          actions: [navigate, clearTypeahead],\n          cond: optionIsNavigable,\n        },\n        [ListboxEvents.OptionMouseEnter]: {\n          target: ListboxStates.Dragging,\n          actions: [navigate, clearTypeahead],\n          cond: optionIsNavigable,\n        },\n        [ListboxEvents.KeyDownNavigate]: {\n          target: ListboxStates.Navigating,\n          actions: [navigate, clearTypeahead, focusList],\n        },\n        [ListboxEvents.KeyDownSearch]: {\n          target: ListboxStates.Navigating,\n          actions: setTypeahead,\n        },\n        [ListboxEvents.UpdateAfterTypeahead]: {\n          actions: [setNavSelectionFromTypeahead],\n        },\n        [ListboxEvents.ClearTypeahead]: {\n          actions: clearTypeahead,\n        },\n        [ListboxEvents.OptionMouseMove]: [\n          {\n            target: ListboxStates.Navigating,\n            actions: [navigate],\n            cond: optionIsNavigable,\n          },\n          {\n            target: ListboxStates.Navigating,\n          },\n        ],\n        [ListboxEvents.OptionMouseUp]: {\n          target: ListboxStates.Idle,\n          actions: [assignValue, clearTypeahead, focusButton, selectOption],\n          cond: optionIsSelectable,\n        },\n      },\n    },\n    [ListboxStates.Navigating]: {\n      on: {\n        ...commonEvents,\n        [ListboxEvents.ClearNavSelection]: {\n          actions: [clearNavigationValue, focusList],\n        },\n        [ListboxEvents.KeyDownEnter]: {\n          target: ListboxStates.Idle,\n          actions: [assignValue, clearTypeahead, focusButton, selectOption],\n          cond: optionIsSelectable,\n        },\n        [ListboxEvents.KeyDownSpace]: {\n          target: ListboxStates.Idle,\n          actions: [assignValue, clearTypeahead, focusButton, selectOption],\n          cond: optionIsSelectable,\n        },\n        [ListboxEvents.ButtonMouseDown]: {\n          target: ListboxStates.Idle,\n          actions: [focusButton],\n        },\n        [ListboxEvents.KeyDownEscape]: {\n          target: ListboxStates.Idle,\n          actions: [focusButton],\n        },\n        [ListboxEvents.OptionMouseDown]: {\n          target: ListboxStates.Dragging,\n        },\n        [ListboxEvents.OutsideMouseDown]: [\n          {\n            target: ListboxStates.Idle,\n            cond: clickedOutsideOfListbox,\n            actions: clearTypeahead,\n          },\n          {\n            target: ListboxStates.Navigating,\n            cond: optionIsActive,\n          },\n          {\n            target: ListboxStates.Interacting,\n            actions: clearTypeahead,\n          },\n        ],\n        [ListboxEvents.OutsideMouseUp]: [\n          {\n            target: ListboxStates.Idle,\n            cond: clickedOutsideOfListbox,\n            actions: clearTypeahead,\n          },\n          {\n            target: ListboxStates.Navigating,\n            cond: optionIsActive,\n          },\n          {\n            target: ListboxStates.Interacting,\n            actions: clearTypeahead,\n          },\n        ],\n        [ListboxEvents.Blur]: [\n          {\n            target: ListboxStates.Idle,\n            cond: listboxLostFocus,\n            actions: clearTypeahead,\n          },\n          {\n            target: ListboxStates.Navigating,\n            cond: shouldNavigate,\n          },\n          {\n            target: ListboxStates.Interacting,\n            actions: clearTypeahead,\n          },\n        ],\n        [ListboxEvents.ButtonMouseUp]: {\n          target: ListboxStates.Navigating,\n          actions: [navigateFromCurrentValue, focusList],\n        },\n        [ListboxEvents.OptionTouchStart]: {\n          target: ListboxStates.Navigating,\n          actions: [navigate, clearTypeahead],\n          cond: optionIsNavigable,\n        },\n        [ListboxEvents.OptionMouseEnter]: {\n          target: ListboxStates.Navigating,\n          actions: [navigate, clearTypeahead],\n          cond: optionIsNavigable,\n        },\n        [ListboxEvents.KeyDownNavigate]: {\n          target: ListboxStates.Navigating,\n          actions: [navigate, clearTypeahead, focusList],\n        },\n        [ListboxEvents.KeyDownSearch]: {\n          target: ListboxStates.Navigating,\n          actions: setTypeahead,\n        },\n        [ListboxEvents.UpdateAfterTypeahead]: {\n          actions: [setNavSelectionFromTypeahead],\n        },\n        [ListboxEvents.ClearTypeahead]: {\n          actions: clearTypeahead,\n        },\n        [ListboxEvents.OptionMouseMove]: [\n          {\n            target: ListboxStates.Navigating,\n            actions: [navigate],\n            cond: optionIsNavigable,\n          },\n          {\n            target: ListboxStates.Navigating,\n          },\n        ],\n      },\n    },\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////\n\nfunction findOptionFromTypeahead(options: ListboxDescendant[], string = \"\") {\n  if (!string) return null;\n  const found = options.find(\n    (option) =>\n      !option.disabled &&\n      option.label &&\n      option.label.toLowerCase().startsWith(string.toLowerCase())\n  );\n  return found || null;\n}\n\nfunction findOptionFromValue(\n  value: string | null | undefined,\n  options: ListboxDescendant[]\n) {\n  return value ? options.find((option) => option.value === value) : undefined;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Types\n\n/**\n * Shared partial interface for all of our event objects.\n */\nexport interface ListboxEventBase extends MachineEventWithRefs {\n  refs: ListboxNodeRefs;\n}\n\n/**\n * DOM nodes for all of the refs used in the listbox state machine.\n */\nexport type ListboxNodeRefs = {\n  button: HTMLElement | null;\n  hiddenInput: HTMLInputElement | null;\n  input: HTMLElement | null;\n  list: HTMLElement | null;\n  popover: HTMLElement | null;\n  selectedOption: HTMLElement | null;\n  highlightedOption: HTMLElement | null;\n};\n\n/**\n * Event object for the listbox state machine.\n */\nexport type ListboxEvent = ListboxEventBase &\n  (\n    | {\n        type: ListboxEvents.Blur;\n        relatedTarget: EventTarget | null;\n      }\n    | {\n        type: ListboxEvents.OutsideMouseDown;\n        relatedTarget: EventTarget | null;\n      }\n    | {\n        type: ListboxEvents.OutsideMouseUp;\n        relatedTarget: EventTarget | null;\n      }\n    | {\n        type: ListboxEvents.GetDerivedData;\n        data: Partial<ListboxStateData>;\n      }\n    | {\n        type: ListboxEvents.ButtonMouseDown;\n        disabled: boolean;\n      }\n    | {\n        type: ListboxEvents.ButtonMouseUp;\n      }\n    | {\n        type: ListboxEvents.ClearNavSelection;\n      }\n    | {\n        type: ListboxEvents.OptionTouchStart;\n        value: ListboxValue;\n        disabled: boolean;\n      }\n    | {\n        type: ListboxEvents.OptionMouseEnter;\n        value: ListboxValue;\n        disabled: boolean;\n      }\n    | {\n        type: ListboxEvents.OptionMouseMove;\n        value: ListboxValue;\n        disabled: boolean;\n      }\n    | {\n        type: ListboxEvents.ValueChange;\n        value: ListboxValue;\n        callback?: ((newValue: ListboxValue) => void) | null | undefined;\n      }\n    | {\n        type: ListboxEvents.KeyDownNavigate;\n        value: ListboxValue | null;\n        disabled: boolean;\n      }\n    | {\n        type: ListboxEvents.KeyDownSearch;\n        query: string;\n        disabled: boolean;\n      }\n    | {\n        type: ListboxEvents.KeyDownEscape;\n      }\n    | {\n        type: ListboxEvents.KeyDownEnter;\n        value?: ListboxValue | null | undefined;\n        disabled?: boolean;\n        callback?: ((newValue: ListboxValue) => void) | null | undefined;\n      }\n    | {\n        type: ListboxEvents.KeyDownSpace;\n        value?: ListboxValue | null | undefined;\n        disabled?: boolean;\n        callback?: ((newValue: ListboxValue) => void) | null | undefined;\n      }\n    | {\n        type: ListboxEvents.OptionMouseDown;\n      }\n    | {\n        type: ListboxEvents.OptionMouseUp;\n        value: ListboxValue | null | undefined;\n        callback?: ((newValue: ListboxValue) => void) | null | undefined;\n        disabled: boolean;\n      }\n    | {\n        type: ListboxEvents.KeyDownTab;\n      }\n    | {\n        type: ListboxEvents.KeyDownShiftTab;\n      }\n    | {\n        type: ListboxEvents.UpdateAfterTypeahead;\n        query: string;\n        callback?: ((newValue: ListboxValue) => void) | null | undefined;\n      }\n    | {\n        type: ListboxEvents.ClearTypeahead;\n      }\n  );\n\n/**\n * State object for the listbox state machine.\n */\nexport type ListboxState = {\n  value: ListboxStates;\n  context: ListboxStateData;\n};\n\nexport type ListboxStateData = {\n  navigationValue: ListboxValue | null;\n  typeaheadQuery: string | null;\n  value: ListboxValue | null;\n  options: ListboxDescendant[];\n};\n","/**\n * Welcome to @reach/listbox!\n *\n * See NOTES.md for some background info if you're interested!\n *\n * TODO: OS-specific behavior (ie, Enter key on native select on Windows)\n * TODO: Consider hack to implement focus controls in forms on iOS\n *       https://github.com/angular/material/issues/8440\n *       Instead of a hidden select, maybe use a visually hidden select with\n *       aria-hidden. When that input gets focus, immediate send focus to the\n *       ListboxButton, then toggle the hidden input's tabIndex to prevent\n *       re-focusing it (this is just an idea, may not work, no idea how some\n *       screen-reader would deal with it).\n * TODO: Write examples showing fallback to a native select menu for users\n *       without JavaScript enabled and small-screen users.\n * TODO: Check positioning on mobile near collision points\n *       https://twitter.com/PipoPeperoni/status/1237597623508275200\n * TODO: Test arrow key navigation in forms in Firefox.\n *       Probably similar solution needed for iOS issue above.\n *       https://twitter.com/GassnerKendall/status/1237778370118598661\n *\n * @see Docs     https://reach.tech/listbox\n * @see Source   https://github.com/reach/reach-ui/tree/main/packages/listbox\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.2/#Listbox\n */\n\nimport React, {\n  forwardRef,\n  Fragment,\n  memo,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useId } from \"@reach/auto-id\";\nimport Popover, { PopoverProps, positionMatchWidth } from \"@reach/popover\";\nimport {\n  createDescendantContext,\n  Descendant,\n  DescendantProvider,\n  useDescendant,\n  useDescendantKeyDown,\n  useDescendants,\n  useDescendantsInit,\n} from \"@reach/descendants\";\nimport {\n  createNamedContext,\n  DistributiveOmit,\n  forwardRefWithAs,\n  isBoolean,\n  isFunction,\n  isRightClick,\n  isString,\n  makeId,\n  memoWithAs,\n  useCallbackProp,\n  useCheckStyles,\n  useControlledSwitchWarning,\n  useForkedRef,\n  useIsomorphicLayoutEffect as useLayoutEffect,\n  wrapEvent,\n} from \"@reach/utils\";\nimport { StateMachine, useCreateMachine, useMachine } from \"@reach/machine\";\nimport {\n  createMachineDefinition,\n  ListboxEvents,\n  ListboxStates,\n  ListboxNodeRefs,\n  ListboxStateData,\n  ListboxEvent,\n} from \"./machine\";\n\nconst DEBUG = false;\n\n////////////////////////////////////////////////////////////////////////////////\n// ListboxContext\n\nconst ListboxDescendantContext = createDescendantContext<ListboxDescendant>(\n  \"ListboxDescendantContext\"\n);\nconst ListboxContext = createNamedContext(\n  \"ListboxContext\",\n  {} as InternalListboxContextValue\n);\nconst ListboxGroupContext = createNamedContext(\n  \"ListboxGroupContext\",\n  {} as ListboxGroupContextValue\n);\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * ListboxInput\n *\n * The top-level component and context provider for the listbox.\n *\n * @see Docs https://reach.tech/listbox#listboxinput\n */\nexport const ListboxInput = forwardRef<\n  HTMLDivElement,\n  ListboxInputProps & { _componentName?: string }\n>(function ListboxInput(\n  {\n    \"aria-labelledby\": ariaLabelledBy,\n    \"aria-label\": ariaLabel,\n    children,\n    defaultValue,\n    disabled = false,\n    form,\n    name,\n    onChange: onChangeProp,\n    required,\n    value: valueProp,\n\n    // We only use this prop for console warnings\n    _componentName = \"ListboxInput\",\n    ...props\n  },\n  forwardedRef\n) {\n  let isControlled = useRef(valueProp != null);\n  let [options, setOptions] = useDescendantsInit<ListboxDescendant>();\n\n  let onChange = useCallbackProp(onChangeProp);\n\n  // DOM refs\n  let buttonRef = useRef<ListboxNodeRefs[\"button\"]>(null);\n  let hiddenInputRef = useRef<HTMLInputElement>(null);\n  let highlightedOptionRef = useRef<ListboxNodeRefs[\"highlightedOption\"]>(null);\n  let inputRef = useRef<ListboxNodeRefs[\"input\"]>(null);\n  let listRef = useRef<ListboxNodeRefs[\"list\"]>(null);\n  let popoverRef = useRef<ListboxNodeRefs[\"popover\"]>(null);\n  let selectedOptionRef = useRef<ListboxNodeRefs[\"selectedOption\"]>(null);\n\n  let machine = useCreateMachine(\n    createMachineDefinition({\n      // The initial value of our machine should come from the `value` or\n      // `defaultValue` props if they exist.\n      value: (isControlled.current ? valueProp! : defaultValue) || null,\n    })\n  );\n\n  let [state, send] = useMachine(\n    machine,\n    {\n      button: buttonRef,\n      hiddenInput: hiddenInputRef,\n      highlightedOption: highlightedOptionRef,\n      input: inputRef,\n      list: listRef,\n      popover: popoverRef,\n      selectedOption: selectedOptionRef,\n    },\n    DEBUG\n  );\n\n  // IDs for aria attributes\n  let _id = useId(props.id);\n  let id = props.id || makeId(\"listbox-input\", _id);\n\n  let ref = useForkedRef(inputRef, forwardedRef);\n\n  // If the button has children, we just render them as the label.\n  // Otherwise we'll find the option with a value that matches the listbox value\n  // and use its label in the button. We'll get that here and send it to the\n  // button via context.\n  // If a user needs the label for SSR to prevent hydration mismatch issues,\n  // they need to control the state of the component and pass a label directly\n  // to the button.\n  let valueLabel = useMemo(() => {\n    let selected = options.find(\n      (option) => option.value === state.context.value\n    );\n    return selected ? selected.label : null;\n  }, [options, state.context.value]);\n\n  let isExpanded = isListboxExpanded(state.value);\n\n  // TODO: Remove duplication and memoize\n  let context: InternalListboxContextValue = useMemo(\n    () => ({\n      ariaLabel,\n      ariaLabelledBy,\n      disabled,\n      isExpanded,\n      listboxId: id,\n      listboxValueLabel: valueLabel,\n      onValueChange: onChange,\n      buttonRef,\n      listRef,\n      popoverRef,\n      selectedOptionRef,\n      highlightedOptionRef,\n      send,\n      state: state.value as ListboxStates,\n      stateData: state.context,\n    }),\n    [\n      ariaLabel,\n      ariaLabelledBy,\n      state.value,\n      state.context,\n      disabled,\n      id,\n      isExpanded,\n      onChange,\n      send,\n      valueLabel,\n    ]\n  );\n\n  // For uncontrolled listbox components where no `defaultValue` is provided, we\n  // will update the value based on the value of the first selectable option.\n  // We call the update directly because:\n  //   A) we only ever need to do this once, so we can guard with a ref\n  //   B) useLayoutEffect races useDecendant, so we might not have options yet\n  //   C) useEffect will cause a flash\n  let mounted = useRef(false);\n  if (\n    !isControlled.current && // the app is not controlling state\n    defaultValue == null && // there is no default value\n    !mounted.current && // we haven't done this already\n    options.length // we have some options\n  ) {\n    mounted.current = true;\n    let first = options.find((option) => !option.disabled);\n    if (first && first.value) {\n      send({\n        type: ListboxEvents.ValueChange,\n        value: first.value!,\n      });\n    }\n  }\n\n  useControlledSwitchWarning(valueProp, \"value\", _componentName);\n\n  // Even if the app controls state, we still need to update it internally to\n  // run the state machine transitions\n  useControlledStateSync(valueProp, state.context.value, () => {\n    send({\n      type: ListboxEvents.ValueChange,\n      value: valueProp!,\n    });\n  });\n\n  useLayoutEffect(() => {\n    send({\n      type: ListboxEvents.GetDerivedData,\n      data: { options },\n    });\n  }, [options, send]);\n\n  useEffect(() => {\n    function handleMouseDown(event: MouseEvent) {\n      let { target, relatedTarget } = event;\n      if (!targetIsInPopover(target, popoverRef.current)) {\n        send({\n          type: ListboxEvents.OutsideMouseDown,\n          relatedTarget: relatedTarget || target,\n        });\n      }\n    }\n    if (isExpanded) {\n      window.addEventListener(\"mousedown\", handleMouseDown);\n    }\n    return () => {\n      window.removeEventListener(\"mousedown\", handleMouseDown);\n    };\n  }, [send, isExpanded]);\n\n  useEffect(() => {\n    function handleMouseUp(event: MouseEvent) {\n      let { target, relatedTarget } = event;\n      if (!targetIsInPopover(target, popoverRef.current)) {\n        send({\n          type: ListboxEvents.OutsideMouseUp,\n          relatedTarget: relatedTarget || target,\n        });\n      }\n    }\n    if (isExpanded) {\n      window.addEventListener(\"mouseup\", handleMouseUp);\n    }\n    return () => {\n      window.removeEventListener(\"mouseup\", handleMouseUp);\n    };\n  }, [send, isExpanded]);\n\n  useCheckStyles(\"listbox\");\n\n  return (\n    <DescendantProvider\n      context={ListboxDescendantContext}\n      items={options}\n      set={setOptions}\n    >\n      <ListboxContext.Provider value={context}>\n        <div\n          {...props}\n          ref={ref}\n          data-reach-listbox-input=\"\"\n          data-state={isExpanded ? \"expanded\" : \"closed\"}\n          data-value={state.context.value}\n          id={id}\n        >\n          {isFunction(children)\n            ? children({\n                id,\n                isExpanded,\n                value: state.context.value,\n                selectedOptionRef: selectedOptionRef,\n                highlightedOptionRef: highlightedOptionRef,\n                valueLabel,\n                // TODO: Remove in 1.0\n                expanded: isExpanded,\n              })\n            : children}\n        </div>\n        {(form || name || required) && (\n          <input\n            ref={hiddenInputRef}\n            data-reach-listbox-hidden-input=\"\"\n            disabled={disabled}\n            form={form}\n            name={name}\n            readOnly\n            required={required}\n            tabIndex={-1}\n            type=\"hidden\"\n            value={state.context.value || \"\"}\n          />\n        )}\n      </ListboxContext.Provider>\n    </DescendantProvider>\n  );\n});\n\nif (__DEV__) {\n  ListboxInput.displayName = \"ListboxInput\";\n  ListboxInput.propTypes = {\n    children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n    defaultValue: PropTypes.string,\n    disabled: PropTypes.bool,\n    form: PropTypes.string,\n    name: PropTypes.string,\n    onChange: PropTypes.func,\n    required: PropTypes.bool,\n    value: PropTypes.string,\n  };\n}\n\n/**\n * @see Docs https://reach.tech/listbox#listboxinput-props\n */\nexport type ListboxInputProps = Omit<\n  React.HTMLProps<HTMLDivElement>,\n  // WHY ARE THESE A THING ON A DIV, UGH\n  \"autoComplete\" | \"autoFocus\" | \"form\" | \"name\" | \"onChange\" | \"defaultValue\"\n> &\n  Pick<\n    React.SelectHTMLAttributes<HTMLSelectElement>,\n    \"form\" | \"name\" | \"required\"\n  > & {\n    /**\n     * The composed listbox expects to receive `ListboxButton` and\n     * `ListboxPopover` as children. You can also pass in arbitrary wrapper\n     * elements if desired.\n     *\n     * @see Docs https://reach.tech/listbox#listboxinput-children\n     */\n    children:\n      | React.ReactNode\n      | ((\n          props: ListboxContextValue & {\n            // TODO: Remove in 1.0\n            expanded: boolean;\n          }\n        ) => React.ReactNode);\n    /**\n     * The default value of an uncontrolled listbox.\n     *\n     * @see Docs https://reach.tech/listbox#listboxinput-defaultvalue\n     */\n    defaultValue?: ListboxValue;\n    /**\n     * Whether or not the listbox is disabled.\n     *\n     * @see Docs https://reach.tech/listbox#listboxinput-disabled\n     */\n    disabled?: boolean;\n    /**\n     * The callback that fires when the listbox value changes.\n     *\n     * @see Docs https://reach.tech/listbox#listboxinput-onchange\n     * @param newValue\n     */\n    onChange?(newValue: ListboxValue): void;\n    /**\n     * The current value of a controlled listbox.\n     *\n     * @see Docs https://reach.tech/listbox#listboxinput-value\n     */\n    value?: ListboxValue;\n  };\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Listbox\n *\n * High-level listbox API\n *\n * @example\n * <Listbox>\n *   <ListboxOption value=\"1\">Option 1</ListboxOption>\n *   <ListboxOption value=\"2\">Option 2</ListboxOption>\n *   <ListboxOption value=\"3\">Option 3</ListboxOption>\n * </Listbox>\n *\n * @see Docs https://reach.tech/listbox#listbox-1\n */\nexport const Listbox = forwardRef<HTMLDivElement, ListboxProps>(\n  function Listbox(\n    { arrow = \"▼\", button, children, portal = true, ...props },\n    forwardedRef\n  ) {\n    return (\n      <ListboxInput {...props} _componentName=\"Listbox\" ref={forwardedRef}>\n        {({ value, valueLabel }) => (\n          <Fragment>\n            <ListboxButton\n              arrow={arrow}\n              children={\n                button\n                  ? isFunction(button)\n                    ? button({ value, label: valueLabel })\n                    : button\n                  : undefined\n              }\n            />\n            <ListboxPopover portal={portal}>\n              <ListboxList>{children}</ListboxList>\n            </ListboxPopover>\n          </Fragment>\n        )}\n      </ListboxInput>\n    );\n  }\n);\n\nif (__DEV__) {\n  Listbox.displayName = \"Listbox\";\n  Listbox.propTypes = {\n    ...ListboxInput.propTypes,\n    arrow: PropTypes.oneOfType([PropTypes.node, PropTypes.bool]),\n    button: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),\n    children: PropTypes.node,\n  };\n}\n\n/**\n * @see Docs https://reach.tech/listbox#listbox-props\n */\nexport type ListboxProps = Omit<ListboxInputProps, \"children\"> & {\n  /**\n   * Renders a text string or React node to represent an arrow inside the\n   * Listbox button.\n   *\n   * @see Docs https://reach.tech/listbox#listbox-arrow\n   */\n  arrow?: React.ReactNode | boolean;\n  /**\n   * A render function or React node to to render the Listbox button's inner\n   * content. See the API for the ListboxButton children prop for details.\n   *\n   * @see Docs https://reach.tech/listbox#listbox-button\n   */\n  button?:\n    | React.ReactNode\n    | ((props: {\n        value: ListboxValue | null;\n        label: string | null;\n      }) => React.ReactNode);\n  children: React.ReactNode;\n  /**\n   * Whether or not the popover should be rendered inside a portal. Defaults to\n   * `true`.\n   *\n   * @see Docs https://reach.tech/listbox#listbox-portal\n   */\n  portal?: boolean;\n};\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * ListboxButton\n *\n * The interactive toggle button that triggers the popover for the listbox.\n *\n * @see Docs https://reach.tech/listbox#listbox-button\n */\nconst ListboxButtonImpl = forwardRefWithAs<ListboxButtonProps, \"span\">(\n  function ListboxButton(\n    {\n      \"aria-label\": ariaLabel,\n      arrow = false,\n      as: Comp = \"span\",\n      children,\n      onKeyDown,\n      onMouseDown,\n      onMouseUp,\n      ...props\n    },\n    forwardedRef\n  ) {\n    let {\n      ariaLabelledBy,\n      buttonRef,\n      disabled,\n      isExpanded,\n      listboxId,\n      stateData,\n      send,\n      listboxValueLabel,\n    } = useContext(ListboxContext);\n    let listboxValue = stateData.value;\n\n    let ref = useForkedRef(buttonRef, forwardedRef);\n\n    let handleKeyDown = useKeyDown();\n\n    function handleMouseDown(event: React.MouseEvent) {\n      if (!isRightClick(event.nativeEvent)) {\n        event.preventDefault();\n        event.stopPropagation();\n        send({\n          type: ListboxEvents.ButtonMouseDown,\n          disabled,\n        });\n      }\n    }\n\n    function handleMouseUp(event: React.MouseEvent) {\n      if (!isRightClick(event.nativeEvent)) {\n        event.preventDefault();\n        event.stopPropagation();\n        send({ type: ListboxEvents.ButtonMouseUp });\n      }\n    }\n\n    let id = makeId(\"button\", listboxId);\n\n    // If the button has children, we just render them as the label\n    // If a user needs the label on the server to prevent hydration mismatch\n    // errors, they need to control the state of the component and pass a label\n    // directly to the button.\n    let label: React.ReactNode = useMemo(() => {\n      if (!children) {\n        return listboxValueLabel;\n      } else if (isFunction(children)) {\n        return children({\n          isExpanded,\n          label: listboxValueLabel!,\n          value: listboxValue,\n          // TODO: Remove in 1.0\n          expanded: isExpanded,\n        });\n      }\n      return children;\n    }, [children, listboxValueLabel, isExpanded, listboxValue]);\n\n    return (\n      <Comp\n        // Applicable to all host language elements regardless of whether a\n        // `role` is applied.\n        // https://www.w3.org/WAI/PF/aria/states_and_properties#global_states_header\n        aria-disabled={disabled || undefined}\n        // Set by the JavaScript when the listbox is displayed. Otherwise, is\n        // not present.\n        // https://www.w3.org/TR/wai-aria-practices-1.2/examples/listbox/listbox-collapsible.html\n        aria-expanded={isExpanded || undefined}\n        // Indicates that activating the button displays a listbox.\n        // https://www.w3.org/TR/wai-aria-practices-1.2/examples/listbox/listbox-collapsible.html\n        aria-haspopup=\"listbox\"\n        // References the two elements whose labels are concatenated by the\n        // browser to label the button. The first element is a span containing\n        // perceivable label for the listbox component. The second element is\n        // the button itself; the button text is set to the name of the\n        // currently chosen element.\n        // https://www.w3.org/TR/wai-aria-practices-1.2/examples/listbox/listbox-collapsible.html\n        // If an `aria-label` is passed, we should skip `aria-labelledby` to\n        // avoid confusion.\n        aria-labelledby={\n          ariaLabel ? undefined : [ariaLabelledBy, id].filter(Boolean).join(\" \")\n        }\n        aria-label={ariaLabel}\n        // Identifies the element as a button widget.\n        // https://www.w3.org/TR/wai-aria-practices-1.2/examples/button/button.html\n        role=\"button\"\n        // Includes the element in the tab sequence.\n        // https://www.w3.org/TR/wai-aria-practices-1.2/examples/button/button.html\n        tabIndex={disabled ? -1 : 0}\n        {...props}\n        ref={ref}\n        data-reach-listbox-button=\"\"\n        id={id}\n        onKeyDown={wrapEvent(onKeyDown, handleKeyDown)}\n        onMouseDown={wrapEvent(onMouseDown, handleMouseDown)}\n        onMouseUp={wrapEvent(onMouseUp, handleMouseUp)}\n      >\n        {label}\n        {arrow && (\n          <ListboxArrow>{isBoolean(arrow) ? null : arrow}</ListboxArrow>\n        )}\n      </Comp>\n    );\n  }\n);\n\nif (__DEV__) {\n  ListboxButtonImpl.displayName = \"ListboxButton\";\n  ListboxButtonImpl.propTypes = {\n    arrow: PropTypes.oneOfType([PropTypes.node, PropTypes.bool]),\n    children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  };\n}\n\nexport const ListboxButton = memoWithAs(ListboxButtonImpl);\n\n/**\n * @see Docs https://reach.tech/listbox#listboxbutton-props\n */\nexport type ListboxButtonProps = {\n  /**\n   * Renders a text string or React node to represent an arrow inside the\n   * button.\n   *\n   * @see Docs https://reach.tech/listbox#listboxbutton-arrow\n   */\n  arrow?: React.ReactNode | boolean;\n  /**\n   * A render function or React node to to render the Listbox button's inner\n   * content.\n   *\n   * By default, the button will display the text label of the selected option\n   * as its inner content. This label can be pulled from the option's inner\n   * text content or explicitly provided to the ListboxOption component via the\n   * label prop. If you want to render the button differently from its default,\n   * you must pass children.\n   *\n   * It's important to note that the ListboxButton's default inner content\n   * cannot be server-side rendered. On the initial render, the button has no\n   * contextual information about the available options in a Listbox. As each\n   * ListboxOption is rendered, it is registered in a context object and updated\n   * at the top of the Listbox tree, which evaluates the options and their props\n   * to determine which option is selectable and which label to display inside\n   * the button. If you need the inner content of the button on the first render\n   * you must control the listbox's state and keep its options' values and\n   * labels in data at the top of the tree, and render the button directly via\n   * children.\n   *\n   * @example\n   * let options = { one: 'One option', two: 'Another option' }\n   * let [value, setValue] = useState(options.one)\n   * return (\n   *   <ListboxInput>\n   *     <ListboxButton>{options[value]}</ListboxButton>\n   *     <ListboxPopover>\n   *       <ListboxList>\n   *         {Object.keys(options).map(option => (\n   *           <ListboxOption key={option} value={option} label={options[option]}>\n   *             {options[option]}\n   *           </ListboxOption>\n   *         ))}\n   *       </ListboxList>\n   *     </ListboxPopover>\n   *   </ListboxInput>\n   * )\n   */\n  children?:\n    | React.ReactNode\n    | ((props: {\n        value: ListboxValue | null;\n        label: string;\n        isExpanded: boolean;\n        // TODO: Remove in 1.0\n        expanded: boolean;\n      }) => React.ReactNode);\n};\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * ListboxArrow\n *\n * A wrapper component for an arrow to display in the `ListboxButton`\n *\n * @see Docs https://reach.tech/listbox#listboxarrow\n */\nconst ListboxArrowImpl = forwardRef<HTMLSpanElement, ListboxArrowProps>(\n  function ListboxArrow({ children, ...props }, forwardedRef) {\n    let { isExpanded } = useContext(ListboxContext);\n    return (\n      <span\n        // The arrow provides no semantic value and its inner content should be\n        // hidden from the accessibility tree\n        aria-hidden\n        {...props}\n        ref={forwardedRef}\n        data-reach-listbox-arrow=\"\"\n        data-expanded={isExpanded ? \"\" : undefined}\n      >\n        {isFunction(children)\n          ? children({\n              isExpanded,\n              // TODO: Remove in 1.0\n              expanded: isExpanded,\n            })\n          : children || \"▼\"}\n      </span>\n    );\n  }\n);\n\nif (__DEV__) {\n  ListboxArrowImpl.displayName = \"ListboxArrow\";\n  ListboxArrowImpl.propTypes = {\n    children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  };\n}\n\nexport const ListboxArrow = memo(ListboxArrowImpl);\n\n/**\n * @see Docs https://reach.tech/listbox#listboxarrow-props\n */\nexport type ListboxArrowProps = React.HTMLProps<HTMLSpanElement> & {\n  /**\n   * Children to render as the listbox button's arrow. This can be a render\n   * function that accepts the listbox's expanded state as an argument.\n   */\n  children?:\n    | React.ReactNode\n    | ((props: {\n        isExpanded: boolean;\n        // TODO: Remove in 1.0\n        expanded: boolean;\n      }) => React.ReactNode);\n};\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * ListboxPopover\n *\n * The popover containing the list of options.\n *\n * @see Docs https://reach.tech/listbox#listboxpopover\n */\nconst ListboxPopoverImpl = forwardRef<any, ListboxPopoverProps>(\n  function ListboxPopover(\n    {\n      position = positionMatchWidth,\n      onBlur,\n      onKeyDown,\n      portal = true,\n      unstable_observableRefs,\n      ...props\n    },\n    forwardedRef\n  ) {\n    let { buttonRef, popoverRef, send, isExpanded } = useContext(\n      ListboxContext\n    );\n    let ref = useForkedRef(popoverRef, forwardedRef);\n\n    let handleKeyDown = useKeyDown();\n\n    let commonProps = {\n      hidden: !isExpanded,\n      tabIndex: -1,\n      ...props,\n      ref,\n      \"data-reach-listbox-popover\": \"\",\n      onBlur: wrapEvent(onBlur, handleBlur),\n      onKeyDown: wrapEvent(onKeyDown, handleKeyDown),\n    };\n\n    function handleBlur(event: React.FocusEvent) {\n      let { nativeEvent } = event;\n      requestAnimationFrame(() => {\n        send({\n          type: ListboxEvents.Blur,\n          relatedTarget: nativeEvent.relatedTarget || nativeEvent.target,\n        });\n      });\n    }\n\n    return portal ? (\n      <Popover\n        {...commonProps}\n        targetRef={buttonRef as any}\n        position={position}\n        unstable_observableRefs={unstable_observableRefs}\n      />\n    ) : (\n      <div {...commonProps} />\n    );\n  }\n);\n\nif (__DEV__) {\n  ListboxPopoverImpl.displayName = \"ListboxPopover\";\n  ListboxPopoverImpl.propTypes = {\n    children: PropTypes.node.isRequired,\n    portal: PropTypes.bool,\n    position: PropTypes.func,\n  };\n}\n\nexport const ListboxPopover = memo(ListboxPopoverImpl);\n\n/**\n * @see Docs https://reach.tech/listbox#listboxpopover-props\n */\nexport type ListboxPopoverProps = React.HTMLProps<HTMLDivElement> & {\n  /**\n   * `ListboxPopover` expects to receive `ListboxList` as its children.\n   *\n   * @see Docs https://reach.tech/listbox#listboxpopover-children\n   */\n  children: React.ReactNode;\n  /**\n   * Whether or not the popover should be rendered inside a portal. Defaults to\n   * `true`\n   *\n   * @see Docs https://reach.tech/listbox#listboxpopover-portal\n   */\n  portal?: boolean;\n  /**\n   * The positioning function for the popover.\n   *\n   * @see Docs https://reach.tech/listbox#listboxpopover-position\n   */\n  position?: PopoverProps[\"position\"];\n  unstable_observableRefs?: PopoverProps[\"unstable_observableRefs\"];\n};\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * ListboxList\n *\n * The list containing all listbox options.\n *\n * @see Docs https://reach.tech/listbox#listboxlist\n */\nexport const ListboxList = forwardRefWithAs<ListboxListProps, \"ul\">(\n  function ListboxList({ as: Comp = \"ul\", ...props }, forwardedRef) {\n    let {\n      ariaLabel,\n      ariaLabelledBy,\n      isExpanded,\n      listboxId,\n      listRef,\n      stateData: { value, navigationValue },\n    } = useContext(ListboxContext);\n    let ref = useForkedRef(forwardedRef, listRef);\n\n    return (\n      <Comp\n        // Tells assistive technologies which of the options, if any, is\n        // visually indicated as having keyboard focus. DOM focus remains on the\n        // `ul` element and the idref specified for `aria-activedescendant`\n        // refers to the `li` element that is visually styled as focused. When\n        // navigation keys, such as `Down Arrow`, are pressed, the JavaScript\n        // changes the value.\n        // https://www.w3.org/TR/wai-aria-practices-1.2/examples/listbox/listbox-grouped.html\n        aria-activedescendant={useOptionId(\n          isExpanded ? navigationValue : value\n        )}\n        // If the listbox is not part of another widget, then it has a visible\n        // label referenced by `aria-labelledby` on the element with role\n        // `listbox`.\n        // https://www.w3.org/TR/wai-aria-practices-1.2/#Listbox\n        // If an `aria-label` is passed, we should skip `aria-labelledby` to\n        // avoid confusion.\n        aria-labelledby={ariaLabel ? undefined : ariaLabelledBy}\n        aria-label={ariaLabel}\n        // An element that contains or owns all the listbox options has role\n        // listbox.\n        // https://www.w3.org/TR/wai-aria-practices-1.2/#Listbox\n        role=\"listbox\"\n        // https://www.w3.org/TR/wai-aria-practices-1.2/examples/listbox/listbox-collapsible.html\n        tabIndex={-1}\n        {...props}\n        ref={ref}\n        data-reach-listbox-list=\"\"\n        id={makeId(\"listbox\", listboxId)}\n      />\n    );\n  }\n);\n\nif (__DEV__) {\n  ListboxList.displayName = \"ListboxList\";\n  ListboxList.propTypes = {};\n}\n\n/**\n * @see Docs https://reach.tech/listbox#listboxlist-props\n */\nexport type ListboxListProps = {};\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * ListboxOption\n *\n * A selectable option for the listbox.\n *\n * @see Docs https://reach.tech/listbox#listboxoption\n */\nexport const ListboxOption = forwardRefWithAs<ListboxOptionProps, \"li\">(\n  function ListboxOption(\n    {\n      as: Comp = \"li\",\n      children,\n      disabled,\n      onMouseDown,\n      onMouseEnter,\n      onMouseLeave,\n      onMouseMove,\n      onMouseUp,\n      onTouchStart,\n      value,\n      label: labelProp,\n      ...props\n    },\n    forwardedRef\n  ) {\n    if (__DEV__ && !value) {\n      throw Error(`A ListboxOption must have a value prop.`);\n    }\n\n    let {\n      highlightedOptionRef,\n      isExpanded,\n      onValueChange,\n      selectedOptionRef,\n      send,\n      state,\n      stateData: { value: listboxValue, navigationValue },\n    } = useContext(ListboxContext);\n\n    let [labelState, setLabel] = useState(labelProp);\n    let label = labelProp || labelState || \"\";\n\n    let ownRef = useRef<HTMLElement | null>(null);\n    useDescendant(\n      {\n        element: ownRef.current!,\n        value,\n        label,\n        disabled: !!disabled,\n      },\n      ListboxDescendantContext\n    );\n\n    // After the ref is mounted to the DOM node, we check to see if we have an\n    // explicit label prop before looking for the node's textContent for\n    // typeahead functionality.\n    let getLabelFromDomNode = useCallback(\n      (node: HTMLElement) => {\n        if (!labelProp && node) {\n          setLabel((prevState) => {\n            if (node.textContent && prevState !== node.textContent) {\n              return node.textContent;\n            }\n            return prevState || \"\";\n          });\n        }\n      },\n      [labelProp]\n    );\n\n    let isHighlighted = navigationValue ? navigationValue === value : false;\n    let isSelected = listboxValue === value;\n\n    let ref = useForkedRef(\n      getLabelFromDomNode,\n      forwardedRef,\n      ownRef,\n      isSelected ? selectedOptionRef : null,\n      isHighlighted ? highlightedOptionRef : null\n    );\n\n    function handleMouseEnter() {\n      send({\n        type: ListboxEvents.OptionMouseEnter,\n        value,\n        disabled: !!disabled,\n      });\n    }\n\n    function handleTouchStart() {\n      send({\n        type: ListboxEvents.OptionTouchStart,\n        value,\n        disabled: !!disabled,\n      });\n    }\n\n    function handleMouseLeave() {\n      send({ type: ListboxEvents.ClearNavSelection });\n    }\n\n    function handleMouseDown(event: React.MouseEvent) {\n      // Prevent blur event from firing and bubbling to the popover\n      if (!isRightClick(event.nativeEvent)) {\n        event.preventDefault();\n        send({ type: ListboxEvents.OptionMouseDown });\n      }\n    }\n\n    function handleMouseUp(event: React.MouseEvent) {\n      if (!isRightClick(event.nativeEvent)) {\n        send({\n          type: ListboxEvents.OptionMouseUp,\n          value,\n          callback: onValueChange,\n          disabled: !!disabled,\n        });\n      }\n    }\n\n    function handleMouseMove() {\n      // We don't really *need* these guards since we put all of our transition\n      // logic in the state machine, but in this case it seems wise not to\n      // needlessly run our transitions every time the user's mouse moves. Seems\n      // like a lot. 🙃\n      if (state === ListboxStates.Open || navigationValue !== value) {\n        send({\n          type: ListboxEvents.OptionMouseMove,\n          value,\n          disabled: !!disabled,\n        });\n      }\n    }\n\n    return (\n      <Comp\n        // In a single-select listbox, the selected option has `aria-selected`\n        // set to `true`.\n        // https://www.w3.org/TR/wai-aria-practices-1.2/#Listbox\n        aria-selected={(isExpanded ? isHighlighted : isSelected) || undefined}\n        // Applicable to all host language elements regardless of whether a\n        // `role` is applied.\n        // https://www.w3.org/WAI/PF/aria/states_and_properties#global_states_header\n        aria-disabled={disabled || undefined}\n        // Each option in the listbox has role `option` and is a DOM descendant\n        // of the element with role `listbox`.\n        // https://www.w3.org/TR/wai-aria-practices-1.2/#Listbox\n        role=\"option\"\n        {...props}\n        ref={ref}\n        id={useOptionId(value)}\n        data-reach-listbox-option=\"\"\n        data-current={isSelected ? \"\" : undefined}\n        data-label={label}\n        data-value={value}\n        onMouseDown={wrapEvent(onMouseDown, handleMouseDown)}\n        onMouseEnter={wrapEvent(onMouseEnter, handleMouseEnter)}\n        onMouseLeave={wrapEvent(onMouseLeave, handleMouseLeave)}\n        onMouseMove={wrapEvent(onMouseMove, handleMouseMove)}\n        onMouseUp={wrapEvent(onMouseUp, handleMouseUp)}\n        onTouchStart={wrapEvent(onTouchStart, handleTouchStart)}\n      >\n        {children}\n      </Comp>\n    );\n  }\n);\n\nif (__DEV__) {\n  ListboxOption.displayName = \"ListboxOption\";\n  ListboxOption.propTypes = {\n    disabled: PropTypes.bool,\n    label: PropTypes.string,\n    value: PropTypes.string.isRequired,\n  };\n}\n\n/**\n * @see Docs https://reach.tech/listbox#listboxoption-props\n */\nexport type ListboxOptionProps = {\n  /**\n   * The option's value. This will be passed into a hidden input field for use\n   * in forms.\n   *\n   * @see Docs https://reach.tech/listbox#listboxoption-value\n   */\n  value: ListboxValue;\n  /**\n   * The option's human-readable label. This prop is optional but highly\n   * encouraged if your option has multiple text nodes that may or may not\n   * correlate with the intended value. It is also useful if the inner text node\n   * begins with a character other than a readable letter (like an emoji or\n   * symbol) so that typeahead works as expected for the user.\n   *\n   * @see Docs https://reach.tech/listbox#listboxoption-label\n   */\n  label?: string;\n  /**\n   * Whether or not the option is disabled from selection and navigation.\n   *\n   * @see Docs https://reach.tech/listbox#listboxoption-disabled\n   */\n  disabled?: boolean;\n};\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * ListboxGroup\n *\n * A group of related listbox options.\n *\n * @see Docs https://reach.tech/listbox#listboxgroup\n */\nexport const ListboxGroup = forwardRef<HTMLDivElement, ListboxGroupProps>(\n  function ListboxGroup({ label, children, ...props }, forwardedRef) {\n    let { listboxId } = useContext(ListboxContext);\n    let labelId = makeId(\"label\", useId(props.id), listboxId);\n    return (\n      <ListboxGroupContext.Provider value={{ labelId }}>\n        <div\n          // Refers to the element containing the option group label\n          // https://www.w3.org/TR/wai-aria-practices-1.2/examples/listbox/listbox-grouped.html\n          aria-labelledby={labelId}\n          // Identifies a group of related options\n          // https://www.w3.org/TR/wai-aria-practices-1.2/examples/listbox/listbox-grouped.html\n          role=\"group\"\n          {...props}\n          data-reach-listbox-group=\"\"\n          ref={forwardedRef}\n        >\n          {label && <ListboxGroupLabel>{label}</ListboxGroupLabel>}\n          {children}\n        </div>\n      </ListboxGroupContext.Provider>\n    );\n  }\n);\n\nif (__DEV__) {\n  ListboxGroup.displayName = \"ListboxGroup\";\n  ListboxGroup.propTypes = {\n    label: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n  };\n}\n\n/**\n * @see Docs https://reach.tech/listbox#listboxgroup-props\n */\nexport type ListboxGroupProps = Omit<\n  React.HTMLProps<HTMLDivElement>,\n  \"label\"\n> & {\n  /**\n   * The text label to use for the listbox group. This can be omitted if a\n   * group contains a `ListboxGroupLabel` component. The label should always\n   * be human-readable.\n   *\n   * @see Docs https://reach.tech/listbox#listboxgroup-label\n   */\n  label?: React.ReactNode;\n};\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * ListboxGroupLabel\n *\n * @see Docs https://reach.tech/listbox#listboxgrouplabel\n */\nexport const ListboxGroupLabel = forwardRefWithAs<\n  ListboxGroupLabelProps,\n  \"span\"\n>(function ListboxGroupLabel({ as: Comp = \"span\", ...props }, forwardedRef) {\n  let { labelId } = useContext(ListboxGroupContext);\n  return (\n    <Comp\n      // See examples\n      // https://www.w3.org/TR/wai-aria-practices-1.2/examples/listbox/listbox-grouped.html\n      role=\"presentation\"\n      {...props}\n      ref={forwardedRef}\n      data-reach-listbox-group-label=\"\"\n      id={labelId}\n    />\n  );\n});\n\nif (__DEV__) {\n  ListboxGroupLabel.displayName = \"ListboxGroupLabel\";\n  ListboxGroupLabel.propTypes = {};\n}\n\n/**\n * @see Docs https://reach.tech/listbox#listboxgroup-props\n */\nexport type ListboxGroupLabelProps = {};\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hook that exposes data for a given `Listbox` component to its descendants.\n *\n * @see Docs https://reach.tech/listbox#uselistboxcontext\n */\nexport function useListboxContext(): ListboxContextValue {\n  let {\n    highlightedOptionRef,\n    listboxId,\n    listboxValueLabel,\n    isExpanded,\n    selectedOptionRef,\n    stateData: { value },\n  } = useContext(ListboxContext);\n  return useMemo(\n    () => ({\n      id: listboxId,\n      isExpanded,\n      selectedOptionRef: selectedOptionRef,\n      highlightedOptionRef: highlightedOptionRef,\n      value,\n      valueLabel: listboxValueLabel,\n    }),\n    [\n      listboxId,\n      isExpanded,\n      value,\n      listboxValueLabel,\n      selectedOptionRef,\n      highlightedOptionRef,\n    ]\n  );\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nfunction isListboxExpanded(state: string) {\n  return [\n    ListboxStates.Navigating,\n    ListboxStates.Open,\n    ListboxStates.Dragging,\n    ListboxStates.Interacting,\n  ].includes(state as ListboxStates);\n}\n\nfunction useKeyDown() {\n  let {\n    disabled: listboxDisabled,\n    onValueChange,\n    stateData: { navigationValue, typeaheadQuery },\n    send,\n  } = useContext(ListboxContext);\n  let options = useDescendants(ListboxDescendantContext);\n\n  useEffect(() => {\n    if (typeaheadQuery) {\n      send({\n        type: ListboxEvents.UpdateAfterTypeahead,\n        query: typeaheadQuery,\n        callback: onValueChange,\n      });\n    }\n    let timeout = window.setTimeout(() => {\n      if (typeaheadQuery != null) {\n        send({ type: ListboxEvents.ClearTypeahead });\n      }\n    }, 1000);\n    return () => {\n      window.clearTimeout(timeout);\n    };\n  }, [onValueChange, send, typeaheadQuery]);\n\n  let index = options.findIndex(({ value }) => value === navigationValue);\n\n  let handleKeyDown = wrapEvent(\n    function (event: React.KeyboardEvent) {\n      let { key } = event;\n      let isSearching = isString(key) && key.length === 1;\n      let navOption = options.find(\n        (option) => option.value === navigationValue\n      );\n      switch (key) {\n        case \"Enter\":\n          send({\n            type: ListboxEvents.KeyDownEnter,\n            value: navigationValue,\n            callback: onValueChange,\n            disabled: !!(navOption?.disabled || listboxDisabled),\n          });\n          return;\n        case \" \":\n          // Prevent browser from scrolling down\n          event.preventDefault();\n          send({\n            type: ListboxEvents.KeyDownSpace,\n            value: navigationValue,\n            callback: onValueChange,\n            disabled: !!(navOption?.disabled || listboxDisabled),\n          });\n          return;\n        case \"Escape\":\n          send({ type: ListboxEvents.KeyDownEscape });\n          return;\n        case \"Tab\":\n          let eventType = event.shiftKey\n            ? ListboxEvents.KeyDownShiftTab\n            : ListboxEvents.KeyDownTab;\n          send({ type: eventType });\n          return;\n        default:\n          if (isSearching) {\n            send({\n              type: ListboxEvents.KeyDownSearch,\n              query: key,\n              disabled: listboxDisabled,\n            });\n          }\n          return;\n      }\n    },\n\n    useDescendantKeyDown(ListboxDescendantContext, {\n      currentIndex: index,\n      orientation: \"vertical\",\n      key: \"index\",\n      rotate: true,\n      filter: (option) => !option.disabled,\n      callback(nextIndex: number) {\n        send({\n          type: ListboxEvents.KeyDownNavigate,\n          value: options[nextIndex].value,\n          disabled: listboxDisabled,\n        });\n      },\n    })\n  );\n\n  return handleKeyDown;\n}\n\nfunction useOptionId(value: ListboxValue | null) {\n  let { listboxId } = useContext(ListboxContext);\n  return value ? makeId(`option-${value}`, listboxId) : undefined;\n}\n\nfunction targetIsInPopover(\n  element: HTMLElement | EventTarget | null,\n  popover: HTMLElement | null\n) {\n  return !!(element === popover || popover?.contains(element as HTMLElement));\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Types\n\nexport type ListboxValue = string;\n\nexport type ListboxDescendant = Descendant<HTMLElement> & {\n  value: ListboxValue;\n  label: string;\n  disabled: boolean;\n};\n\nexport type ListboxContextValue = {\n  id: string | undefined;\n  isExpanded: boolean;\n  highlightedOptionRef: React.RefObject<ListboxNodeRefs[\"highlightedOption\"]>;\n  selectedOptionRef: React.RefObject<ListboxNodeRefs[\"selectedOption\"]>;\n  value: ListboxValue | null;\n  valueLabel: string | null;\n};\n\ninterface InternalListboxContextValue {\n  ariaLabel?: string;\n  ariaLabelledBy?: string;\n  buttonRef: React.RefObject<ListboxNodeRefs[\"button\"]>;\n  isExpanded: boolean;\n  listRef: React.RefObject<ListboxNodeRefs[\"list\"]>;\n  popoverRef: React.RefObject<ListboxNodeRefs[\"popover\"]>;\n  selectedOptionRef: React.RefObject<ListboxNodeRefs[\"selectedOption\"]>;\n  highlightedOptionRef: React.RefObject<ListboxNodeRefs[\"highlightedOption\"]>;\n  disabled: boolean;\n  listboxId: string;\n  listboxValueLabel: string | null;\n  onValueChange: ((newValue: ListboxValue) => void) | null | undefined;\n  send: StateMachine.Service<\n    ListboxStateData,\n    DistributiveOmit<ListboxEvent, \"refs\">\n  >[\"send\"];\n  state: ListboxStates;\n  stateData: ListboxStateData;\n}\n\ninterface ListboxGroupContextValue {\n  labelId: string;\n}\n\nfunction useControlledStateSync<T>(\n  controlPropValue: T | undefined,\n  internalValue: T,\n  send: any\n) {\n  let { current: isControlled } = useRef(controlPropValue != null);\n  if (isControlled && controlPropValue !== internalValue) {\n    send();\n  }\n}\n"],"names":["ListboxStates","ListboxEvents","clearNavigationValue","assign","navigationValue","clearTypeahead","typeaheadQuery","assignValue","value","_","event","navigate","data","navigateFromCurrentValue","selected","options","find","option","undefined","disabled","listboxLostFocus","type","Blur","refs","list","popover","relatedTarget","ownerDocument","getOwnerDocument","document","activeElement","contains","clickedOutsideOfListbox","OutsideMouseDown","OutsideMouseUp","button","optionIsActive","shouldNavigate","focusList","requestAnimationFrame","focus","focusButton","listboxIsNotDisabled","optionIsNavigable","OptionTouchStart","optionIsSelectable","selectOption","callback","submitForm","KeyDownEnter","hiddenInput","form","submitButton","querySelector","click","setTypeahead","query","setValueFromTypeahead","UpdateAfterTypeahead","match","findOptionFromTypeahead","setNavSelectionFromTypeahead","commonEvents","GetDerivedData","actions","ctx","ValueChange","string","label","toLowerCase","startsWith","ListboxDescendantContext","createDescendantContext","ListboxContext","createNamedContext","ListboxGroupContext","ListboxInput","forwardRef","forwardedRef","ariaLabelledBy","ariaLabel","children","defaultValue","name","onChangeProp","onChange","required","valueProp","_componentName","props","isControlled","useRef","useDescendantsInit","setOptions","useCallbackProp","buttonRef","hiddenInputRef","highlightedOptionRef","inputRef","listRef","popoverRef","selectedOptionRef","machine","useCreateMachine","id","initial","Idle","context","states","on","ButtonMouseDown","target","Open","cond","KeyDownSpace","Navigating","KeyDownSearch","ClearTypeahead","KeyDownNavigate","Interacting","entry","ClearNavSelection","KeyDownEscape","OptionMouseDown","Dragging","OptionMouseEnter","ButtonMouseUp","OptionMouseMove","OptionMouseUp","createMachineDefinition","current","useMachine","highlightedOption","input","selectedOption","state","send","_id","useId","makeId","ref","useForkedRef","valueLabel","useMemo","isExpanded","includes","isListboxExpanded","listboxId","listboxValueLabel","onValueChange","stateData","mounted","length","first","useControlledSwitchWarning","controlPropValue","internalValue","useControlledStateSync","useLayoutEffect","useEffect","handleMouseDown","targetIsInPopover","window","addEventListener","removeEventListener","handleMouseUp","useCheckStyles","React","DescendantProvider","items","set","Provider","isFunction","expanded","readOnly","tabIndex","Listbox","arrow","portal","Fragment","ListboxButton","ListboxPopover","ListboxList","ListboxButtonImpl","forwardRefWithAs","as","Comp","onKeyDown","onMouseDown","onMouseUp","useContext","listboxValue","handleKeyDown","useKeyDown","filter","Boolean","join","role","wrapEvent","isRightClick","nativeEvent","preventDefault","stopPropagation","ListboxArrow","isBoolean","memoWithAs","ListboxArrowImpl","memo","ListboxPopoverImpl","position","positionMatchWidth","onBlur","unstable_observableRefs","commonProps","hidden","Popover","targetRef","useOptionId","ListboxOption","onMouseEnter","onMouseLeave","onMouseMove","onTouchStart","labelProp","useState","setLabel","ownRef","useDescendant","element","getLabelFromDomNode","useCallback","node","prevState","textContent","isHighlighted","isSelected","ListboxGroup","labelId","ListboxGroupLabel","listboxDisabled","useDescendants","timeout","setTimeout","clearTimeout","index","findIndex","key","isSearching","isString","navOption","shiftKey","KeyDownShiftTab","KeyDownTab","useDescendantKeyDown","currentIndex","orientation","rotate","nextIndex"],"mappings":"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"}