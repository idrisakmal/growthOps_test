{"version":3,"file":"listbox.cjs.development.js","sources":["../src/machine.ts","../src/index.tsx"],"sourcesContent":["import { assign, MachineEventWithRefs, StateMachine } from \"@reach/machine\";\nimport { getOwnerDocument } from \"@reach/utils\";\nimport { ListboxDescendant, ListboxValue } from \"./index\";\n\n////////////////////////////////////////////////////////////////////////////////\n// States\n\nexport enum ListboxStates {\n  // Resting/closed state.\n  Idle = \"IDLE\",\n\n  // Listbox is open but the user is not yet navigating.\n  Open = \"OPEN\",\n\n  // The user is navigating the list\n  Navigating = \"NAVIGATING\",\n\n  // The user has moused-down but hasn't made a selection yet\n  Dragging = \"DRAGGING\",\n\n  // The user is interacting with arbitrary elements inside the popover\n  Interacting = \"INTERACTING\",\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Events\n\nexport enum ListboxEvents {\n  ButtonMouseDown = \"BUTTON_MOUSE_DOWN\",\n  ButtonMouseUp = \"BUTTON_MOUSE_UP\",\n  Blur = \"BLUR\",\n  ClearNavSelection = \"CLEAR_NAV_SELECTION\",\n  ClearTypeahead = \"CLEAR_TYPEAHEAD\",\n  GetDerivedData = \"GET_DERIVED_DATA\",\n  KeyDownEscape = \"KEY_DOWN_ESCAPE\",\n  KeyDownEnter = \"KEY_DOWN_ENTER\",\n  KeyDownSpace = \"KEY_DOWN_SPACE\",\n  KeyDownNavigate = \"KEY_DOWN_NAVIGATE\",\n  KeyDownSearch = \"KEY_DOWN_SEARCH\",\n  KeyDownTab = \"KEY_DOWN_TAB\",\n  KeyDownShiftTab = \"KEY_DOWN_SHIFT_TAB\",\n  OptionTouchStart = \"OPTION_TOUCH_START\",\n  OptionMouseMove = \"OPTION_MOUSE_MOVE\",\n  OptionMouseEnter = \"OPTION_MOUSE_ENTER\",\n  OutsideMouseDown = \"OUTSIDE_MOUSE_DOWN\",\n  OutsideMouseUp = \"OUTSIDE_MOUSE_UP\",\n\n  // Uncontrolled value changes come from specific events (click, key, etc.)\n  // ValueChange > Value change may have come from somewhere else\n  ValueChange = \"VALUE_CHANGE\",\n\n  OptionMouseDown = \"OPTION_MOUSE_DOWN\",\n  OptionMouseUp = \"OPTION_MOUSE_UP\",\n  PopoverPointerDown = \"POPOVER_POINTER_DOWN\",\n  PopoverPointerUp = \"POPOVER_POINTER_UP\",\n  UpdateAfterTypeahead = \"UPDATE_AFTER_TYPEAHEAD\",\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Actions and conditions\n\nlet clearNavigationValue = assign<ListboxStateData>({\n  navigationValue: null,\n});\n\nlet clearTypeahead = assign<ListboxStateData>({\n  typeaheadQuery: null,\n});\n\nlet assignValue = assign<ListboxStateData, any>({\n  value: (_, event) => event.value,\n});\n\nlet navigate = assign<ListboxStateData, any>({\n  navigationValue: (data, event) => event.value,\n});\n\nlet navigateFromCurrentValue = assign<ListboxStateData, any>({\n  navigationValue: (data) => {\n    // Before we navigate based on the current value, we need to make sure the\n    // current value is selectable. If not, we should instead navigate to the\n    // first selectable option.\n    let selected = findOptionFromValue(data.value, data.options);\n    if (selected && !selected.disabled) {\n      return data.value;\n    } else {\n      return data.options.find((option) => !option.disabled)?.value || null;\n    }\n  },\n});\n\nfunction listboxLostFocus(data: ListboxStateData, event: ListboxEvent) {\n  if (event.type === ListboxEvents.Blur) {\n    let { list, popover } = event.refs;\n    let { relatedTarget } = event;\n\n    let ownerDocument = (popover && getOwnerDocument(popover)) || document;\n\n    return !!(\n      ownerDocument.activeElement !== list &&\n      popover &&\n      !popover.contains(\n        (relatedTarget as Element) || ownerDocument.activeElement\n      )\n    );\n  }\n  return false;\n}\n\nfunction clickedOutsideOfListbox(data: ListboxStateData, event: ListboxEvent) {\n  if (\n    event.type === ListboxEvents.OutsideMouseDown ||\n    event.type === ListboxEvents.OutsideMouseUp\n  ) {\n    let { button, popover } = event.refs;\n    let { relatedTarget } = event;\n\n    // Close the popover IF:\n    return !!(\n      // clicked element is not the button\n      (\n        relatedTarget !== button &&\n        // clicked element is not inside the button\n        button &&\n        !button.contains(relatedTarget as Element) &&\n        // clicked element is not inside the popover\n        popover &&\n        !popover.contains(relatedTarget as Element)\n      )\n    );\n  }\n  return false;\n}\n\nfunction optionIsActive(data: ListboxStateData, event: any) {\n  return !!data.options.find((option) => option.value === data.navigationValue);\n}\n\nfunction shouldNavigate(data: ListboxStateData, event: any) {\n  let { popover, list } = event.refs;\n  let { relatedTarget } = event;\n  // When a blur event happens, we want to move to Navigating state unless the\n  // user is interacting with elements inside the popover...\n  if (\n    popover &&\n    relatedTarget &&\n    popover.contains(relatedTarget as Element) &&\n    relatedTarget !== list\n  ) {\n    return false;\n  }\n  // ...otherwise, just make sure the next option is selectable\n  return optionIsActive(data, event);\n}\n\nfunction focusList(data: ListboxStateData, event: any) {\n  requestAnimationFrame(() => {\n    event.refs.list && event.refs.list.focus();\n  });\n}\n\nfunction focusButton(data: ListboxStateData, event: any) {\n  event.refs.button && event.refs.button.focus();\n}\n\nfunction listboxIsNotDisabled(data: ListboxStateData, event: any) {\n  return !event.disabled;\n}\n\nfunction optionIsNavigable(data: ListboxStateData, event: ListboxEvent) {\n  if (event.type === ListboxEvents.OptionTouchStart) {\n    if (event && event.disabled) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction optionIsSelectable(data: ListboxStateData, event: any) {\n  if (event && event.disabled) {\n    return false;\n  }\n  return data.navigationValue != null;\n}\n\nfunction selectOption(data: ListboxStateData, event: any) {\n  event.callback && event.callback(event.value);\n}\n\nfunction submitForm(data: ListboxStateData, event: any) {\n  if (event.type !== ListboxEvents.KeyDownEnter) {\n    return;\n  }\n\n  // So this one is a little weird, but here's what we're doing.\n  // When a user presses Enter in the context of a form, the form\n  // should submit. Now I know you're probably thinking:\n  //\n  //      \"Aha! I've got it!\"\n  //          > inputNode.form.submit()\n  //      ** cracks knuckles ** \"Phew. My work here is done.\"\n  //\n  // But alas, we are not so lucky. What's really happening when a\n  // user presses enter in a normal form field is that the browser\n  // looks at the form the input is in, then looks for the first\n  // button or input in that form where its type property is `submit`,\n  // then it triggers a click event on that button. COOL, CARRY ON.\n  //\n  // If we were to fire inputNode.form.submit(), this would bypass any\n  // onSubmit handler in the form and just do what the browser\n  // normally does when you submit a form and trigger a page refresh.\n  // No bueno. So we do what the browser does and just go on a duck\n  // hunt for the first submit button in the form and we click that\n  // sucker.\n  let { hiddenInput } = event.refs;\n  if (hiddenInput && hiddenInput.form) {\n    let submitButton = hiddenInput.form.querySelector(\"button,[type='submit']\");\n    submitButton && (submitButton as any).click();\n  }\n}\n\nlet setTypeahead = assign<ListboxStateData, any>({\n  typeaheadQuery: (data, event) => {\n    return (data.typeaheadQuery || \"\") + event.query;\n  },\n});\n\nlet setValueFromTypeahead = assign<ListboxStateData, ListboxEvent>({\n  value: (data, event) => {\n    if (event.type === ListboxEvents.UpdateAfterTypeahead && event.query) {\n      let match = findOptionFromTypeahead(data.options, event.query);\n      if (match && !match.disabled) {\n        event.callback && event.callback(match.value);\n        return match.value;\n      }\n    }\n    return data.value;\n  },\n});\n\nlet setNavSelectionFromTypeahead = assign<ListboxStateData, ListboxEvent>({\n  navigationValue: (data, event) => {\n    if (event.type === ListboxEvents.UpdateAfterTypeahead && event.query) {\n      let match = findOptionFromTypeahead(data.options, event.query);\n      if (match && !match.disabled) {\n        return match.value;\n      }\n    }\n    return data.navigationValue;\n  },\n});\n\nlet commonEvents = {\n  [ListboxEvents.GetDerivedData]: {\n    actions: assign<ListboxStateData, any>((ctx, event) => {\n      return {\n        ...ctx,\n        ...event.data,\n      };\n    }),\n  },\n  [ListboxEvents.ValueChange]: {\n    actions: [assignValue, selectOption],\n  },\n};\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Initializer for our state machine.\n *\n * @param initial\n * @param props\n */\nexport const createMachineDefinition = ({\n  value,\n}: {\n  value: ListboxValue | null;\n}): StateMachine.Config<ListboxStateData, ListboxEvent, ListboxState> => ({\n  id: \"listbox\",\n  initial: ListboxStates.Idle,\n  context: {\n    value,\n    options: [],\n    navigationValue: null,\n    typeaheadQuery: null,\n  },\n  states: {\n    [ListboxStates.Idle]: {\n      on: {\n        ...commonEvents,\n        [ListboxEvents.ButtonMouseDown]: {\n          target: ListboxStates.Open,\n          actions: [navigateFromCurrentValue],\n          cond: listboxIsNotDisabled,\n        },\n        [ListboxEvents.KeyDownSpace]: {\n          target: ListboxStates.Navigating,\n          actions: [navigateFromCurrentValue, focusList],\n          cond: listboxIsNotDisabled,\n        },\n        [ListboxEvents.KeyDownSearch]: {\n          target: ListboxStates.Idle,\n          actions: setTypeahead,\n          cond: listboxIsNotDisabled,\n        },\n        [ListboxEvents.UpdateAfterTypeahead]: {\n          target: ListboxStates.Idle,\n          actions: [setValueFromTypeahead],\n          cond: listboxIsNotDisabled,\n        },\n        [ListboxEvents.ClearTypeahead]: {\n          target: ListboxStates.Idle,\n          actions: clearTypeahead,\n        },\n        [ListboxEvents.KeyDownNavigate]: {\n          target: ListboxStates.Navigating,\n          actions: [navigateFromCurrentValue, clearTypeahead, focusList],\n          cond: listboxIsNotDisabled,\n        },\n        [ListboxEvents.KeyDownEnter]: {\n          actions: [submitForm],\n          cond: listboxIsNotDisabled,\n        },\n      },\n    },\n    [ListboxStates.Interacting]: {\n      entry: [clearNavigationValue],\n      on: {\n        ...commonEvents,\n        [ListboxEvents.ClearNavSelection]: {\n          actions: [clearNavigationValue, focusList],\n        },\n        [ListboxEvents.KeyDownEnter]: {\n          target: ListboxStates.Idle,\n          actions: [assignValue, clearTypeahead, focusButton, selectOption],\n          cond: optionIsSelectable,\n        },\n        [ListboxEvents.KeyDownSpace]: {\n          target: ListboxStates.Idle,\n          actions: [assignValue, clearTypeahead, focusButton, selectOption],\n          cond: optionIsSelectable,\n        },\n        [ListboxEvents.ButtonMouseDown]: {\n          target: ListboxStates.Idle,\n          // When the user triggers a mouseDown event on the button, we call\n          // event.preventDefault() because the browser will naturally send a\n          // mouseup event and click, which will reopen the button (which we\n          // don't want). As such, the click won't blur the open list or\n          // re-focus the trigger, so we call `focusButton` to do that manually.\n          // We could work around this with deferred transitions with xstate,\n          // but @xstate/fsm currently doesn't support that feature and this\n          // works good enough for the moment.\n          actions: [focusButton],\n        },\n        [ListboxEvents.KeyDownEscape]: {\n          target: ListboxStates.Idle,\n          actions: [focusButton],\n        },\n        [ListboxEvents.OptionMouseDown]: {\n          target: ListboxStates.Dragging,\n        },\n        [ListboxEvents.OutsideMouseDown]: [\n          {\n            target: ListboxStates.Idle,\n            cond: clickedOutsideOfListbox,\n            actions: clearTypeahead,\n          },\n          {\n            target: ListboxStates.Dragging,\n            actions: clearTypeahead,\n            cond: optionIsActive,\n          },\n        ],\n        [ListboxEvents.OutsideMouseUp]: [\n          {\n            target: ListboxStates.Idle,\n            cond: clickedOutsideOfListbox,\n            actions: clearTypeahead,\n          },\n          {\n            target: ListboxStates.Navigating,\n            cond: optionIsActive,\n          },\n          {\n            target: ListboxStates.Interacting,\n            actions: clearTypeahead,\n          },\n        ],\n        [ListboxEvents.KeyDownEnter]: ListboxStates.Interacting,\n        [ListboxEvents.Blur]: [\n          {\n            target: ListboxStates.Idle,\n            cond: listboxLostFocus,\n            actions: clearTypeahead,\n          },\n          {\n            target: ListboxStates.Navigating,\n            cond: shouldNavigate,\n          },\n          {\n            target: ListboxStates.Interacting,\n            actions: clearTypeahead,\n          },\n        ],\n        [ListboxEvents.OptionTouchStart]: {\n          target: ListboxStates.Navigating,\n          actions: [navigate, clearTypeahead],\n          cond: optionIsNavigable,\n        },\n        [ListboxEvents.OptionMouseEnter]: {\n          target: ListboxStates.Navigating,\n          actions: [navigate, clearTypeahead],\n          cond: optionIsNavigable,\n        },\n        [ListboxEvents.KeyDownNavigate]: {\n          target: ListboxStates.Navigating,\n          actions: [navigate, clearTypeahead, focusList],\n        },\n      },\n    },\n    [ListboxStates.Open]: {\n      on: {\n        ...commonEvents,\n        [ListboxEvents.ClearNavSelection]: {\n          actions: [clearNavigationValue],\n        },\n        [ListboxEvents.KeyDownEnter]: {\n          target: ListboxStates.Idle,\n          actions: [assignValue, clearTypeahead, focusButton, selectOption],\n          cond: optionIsSelectable,\n        },\n        [ListboxEvents.KeyDownSpace]: {\n          target: ListboxStates.Idle,\n          actions: [assignValue, clearTypeahead, focusButton, selectOption],\n          cond: optionIsSelectable,\n        },\n        [ListboxEvents.ButtonMouseDown]: {\n          target: ListboxStates.Idle,\n          actions: [focusButton],\n        },\n        [ListboxEvents.KeyDownEscape]: {\n          target: ListboxStates.Idle,\n          actions: [focusButton],\n        },\n        [ListboxEvents.OptionMouseDown]: {\n          target: ListboxStates.Dragging,\n        },\n        [ListboxEvents.OutsideMouseDown]: [\n          {\n            target: ListboxStates.Idle,\n            cond: clickedOutsideOfListbox,\n            actions: clearTypeahead,\n          },\n          {\n            target: ListboxStates.Dragging,\n            cond: optionIsActive,\n          },\n          {\n            target: ListboxStates.Interacting,\n            actions: clearTypeahead,\n          },\n        ],\n        [ListboxEvents.OutsideMouseUp]: [\n          {\n            target: ListboxStates.Idle,\n            cond: clickedOutsideOfListbox,\n            actions: clearTypeahead,\n          },\n          {\n            target: ListboxStates.Navigating,\n            cond: optionIsActive,\n          },\n          {\n            target: ListboxStates.Interacting,\n            actions: clearTypeahead,\n          },\n        ],\n        [ListboxEvents.Blur]: [\n          {\n            target: ListboxStates.Idle,\n            cond: listboxLostFocus,\n            actions: clearTypeahead,\n          },\n          {\n            target: ListboxStates.Navigating,\n            cond: shouldNavigate,\n          },\n          {\n            target: ListboxStates.Interacting,\n            actions: clearTypeahead,\n          },\n        ],\n        [ListboxEvents.ButtonMouseUp]: {\n          target: ListboxStates.Navigating,\n          actions: [navigateFromCurrentValue, focusList],\n        },\n        [ListboxEvents.OptionTouchStart]: {\n          target: ListboxStates.Navigating,\n          actions: [navigate, clearTypeahead],\n          cond: optionIsNavigable,\n        },\n        [ListboxEvents.KeyDownNavigate]: {\n          target: ListboxStates.Navigating,\n          actions: [navigate, clearTypeahead, focusList],\n        },\n        [ListboxEvents.KeyDownSearch]: {\n          target: ListboxStates.Navigating,\n          actions: setTypeahead,\n        },\n        [ListboxEvents.UpdateAfterTypeahead]: {\n          actions: [setNavSelectionFromTypeahead],\n        },\n        [ListboxEvents.ClearTypeahead]: {\n          actions: clearTypeahead,\n        },\n        [ListboxEvents.OptionMouseMove]: [\n          {\n            target: ListboxStates.Dragging,\n            actions: [navigate],\n            cond: optionIsNavigable,\n          },\n          {\n            target: ListboxStates.Dragging,\n          },\n        ],\n      },\n    },\n    [ListboxStates.Dragging]: {\n      on: {\n        ...commonEvents,\n        [ListboxEvents.ClearNavSelection]: {\n          actions: [clearNavigationValue],\n        },\n        [ListboxEvents.KeyDownEnter]: {\n          target: ListboxStates.Idle,\n          actions: [assignValue, clearTypeahead, focusButton, selectOption],\n          cond: optionIsSelectable,\n        },\n        [ListboxEvents.KeyDownSpace]: {\n          target: ListboxStates.Idle,\n          actions: [assignValue, clearTypeahead, focusButton, selectOption],\n          cond: optionIsSelectable,\n        },\n        [ListboxEvents.ButtonMouseDown]: {\n          target: ListboxStates.Idle,\n          actions: [focusButton],\n        },\n        [ListboxEvents.KeyDownEscape]: {\n          target: ListboxStates.Idle,\n          actions: [focusButton],\n        },\n        [ListboxEvents.OptionMouseDown]: {\n          target: ListboxStates.Dragging,\n        },\n        [ListboxEvents.OutsideMouseDown]: [\n          {\n            target: ListboxStates.Idle,\n            cond: clickedOutsideOfListbox,\n            actions: clearTypeahead,\n          },\n          {\n            target: ListboxStates.Navigating,\n            cond: optionIsActive,\n          },\n          {\n            target: ListboxStates.Interacting,\n            actions: clearTypeahead,\n          },\n        ],\n        [ListboxEvents.OutsideMouseUp]: [\n          {\n            target: ListboxStates.Idle,\n            cond: clickedOutsideOfListbox,\n            actions: clearTypeahead,\n          },\n          {\n            target: ListboxStates.Navigating,\n            cond: optionIsActive,\n            actions: focusList,\n          },\n          {\n            target: ListboxStates.Interacting,\n            actions: [clearTypeahead, focusList],\n          },\n        ],\n        [ListboxEvents.Blur]: [\n          {\n            target: ListboxStates.Idle,\n            cond: listboxLostFocus,\n            actions: clearTypeahead,\n          },\n          {\n            target: ListboxStates.Navigating,\n            cond: shouldNavigate,\n          },\n          {\n            target: ListboxStates.Interacting,\n            actions: clearTypeahead,\n          },\n        ],\n\n        [ListboxEvents.ButtonMouseUp]: {\n          target: ListboxStates.Navigating,\n          actions: [navigateFromCurrentValue, focusList],\n        },\n        [ListboxEvents.OptionTouchStart]: {\n          target: ListboxStates.Navigating,\n          actions: [navigate, clearTypeahead],\n          cond: optionIsNavigable,\n        },\n        [ListboxEvents.OptionMouseEnter]: {\n          target: ListboxStates.Dragging,\n          actions: [navigate, clearTypeahead],\n          cond: optionIsNavigable,\n        },\n        [ListboxEvents.KeyDownNavigate]: {\n          target: ListboxStates.Navigating,\n          actions: [navigate, clearTypeahead, focusList],\n        },\n        [ListboxEvents.KeyDownSearch]: {\n          target: ListboxStates.Navigating,\n          actions: setTypeahead,\n        },\n        [ListboxEvents.UpdateAfterTypeahead]: {\n          actions: [setNavSelectionFromTypeahead],\n        },\n        [ListboxEvents.ClearTypeahead]: {\n          actions: clearTypeahead,\n        },\n        [ListboxEvents.OptionMouseMove]: [\n          {\n            target: ListboxStates.Navigating,\n            actions: [navigate],\n            cond: optionIsNavigable,\n          },\n          {\n            target: ListboxStates.Navigating,\n          },\n        ],\n        [ListboxEvents.OptionMouseUp]: {\n          target: ListboxStates.Idle,\n          actions: [assignValue, clearTypeahead, focusButton, selectOption],\n          cond: optionIsSelectable,\n        },\n      },\n    },\n    [ListboxStates.Navigating]: {\n      on: {\n        ...commonEvents,\n        [ListboxEvents.ClearNavSelection]: {\n          actions: [clearNavigationValue, focusList],\n        },\n        [ListboxEvents.KeyDownEnter]: {\n          target: ListboxStates.Idle,\n          actions: [assignValue, clearTypeahead, focusButton, selectOption],\n          cond: optionIsSelectable,\n        },\n        [ListboxEvents.KeyDownSpace]: {\n          target: ListboxStates.Idle,\n          actions: [assignValue, clearTypeahead, focusButton, selectOption],\n          cond: optionIsSelectable,\n        },\n        [ListboxEvents.ButtonMouseDown]: {\n          target: ListboxStates.Idle,\n          actions: [focusButton],\n        },\n        [ListboxEvents.KeyDownEscape]: {\n          target: ListboxStates.Idle,\n          actions: [focusButton],\n        },\n        [ListboxEvents.OptionMouseDown]: {\n          target: ListboxStates.Dragging,\n        },\n        [ListboxEvents.OutsideMouseDown]: [\n          {\n            target: ListboxStates.Idle,\n            cond: clickedOutsideOfListbox,\n            actions: clearTypeahead,\n          },\n          {\n            target: ListboxStates.Navigating,\n            cond: optionIsActive,\n          },\n          {\n            target: ListboxStates.Interacting,\n            actions: clearTypeahead,\n          },\n        ],\n        [ListboxEvents.OutsideMouseUp]: [\n          {\n            target: ListboxStates.Idle,\n            cond: clickedOutsideOfListbox,\n            actions: clearTypeahead,\n          },\n          {\n            target: ListboxStates.Navigating,\n            cond: optionIsActive,\n          },\n          {\n            target: ListboxStates.Interacting,\n            actions: clearTypeahead,\n          },\n        ],\n        [ListboxEvents.Blur]: [\n          {\n            target: ListboxStates.Idle,\n            cond: listboxLostFocus,\n            actions: clearTypeahead,\n          },\n          {\n            target: ListboxStates.Navigating,\n            cond: shouldNavigate,\n          },\n          {\n            target: ListboxStates.Interacting,\n            actions: clearTypeahead,\n          },\n        ],\n        [ListboxEvents.ButtonMouseUp]: {\n          target: ListboxStates.Navigating,\n          actions: [navigateFromCurrentValue, focusList],\n        },\n        [ListboxEvents.OptionTouchStart]: {\n          target: ListboxStates.Navigating,\n          actions: [navigate, clearTypeahead],\n          cond: optionIsNavigable,\n        },\n        [ListboxEvents.OptionMouseEnter]: {\n          target: ListboxStates.Navigating,\n          actions: [navigate, clearTypeahead],\n          cond: optionIsNavigable,\n        },\n        [ListboxEvents.KeyDownNavigate]: {\n          target: ListboxStates.Navigating,\n          actions: [navigate, clearTypeahead, focusList],\n        },\n        [ListboxEvents.KeyDownSearch]: {\n          target: ListboxStates.Navigating,\n          actions: setTypeahead,\n        },\n        [ListboxEvents.UpdateAfterTypeahead]: {\n          actions: [setNavSelectionFromTypeahead],\n        },\n        [ListboxEvents.ClearTypeahead]: {\n          actions: clearTypeahead,\n        },\n        [ListboxEvents.OptionMouseMove]: [\n          {\n            target: ListboxStates.Navigating,\n            actions: [navigate],\n            cond: optionIsNavigable,\n          },\n          {\n            target: ListboxStates.Navigating,\n          },\n        ],\n      },\n    },\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////\n\nfunction findOptionFromTypeahead(options: ListboxDescendant[], string = \"\") {\n  if (!string) return null;\n  const found = options.find(\n    (option) =>\n      !option.disabled &&\n      option.label &&\n      option.label.toLowerCase().startsWith(string.toLowerCase())\n  );\n  return found || null;\n}\n\nfunction findOptionFromValue(\n  value: string | null | undefined,\n  options: ListboxDescendant[]\n) {\n  return value ? options.find((option) => option.value === value) : undefined;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Types\n\n/**\n * Shared partial interface for all of our event objects.\n */\nexport interface ListboxEventBase extends MachineEventWithRefs {\n  refs: ListboxNodeRefs;\n}\n\n/**\n * DOM nodes for all of the refs used in the listbox state machine.\n */\nexport type ListboxNodeRefs = {\n  button: HTMLElement | null;\n  hiddenInput: HTMLInputElement | null;\n  input: HTMLElement | null;\n  list: HTMLElement | null;\n  popover: HTMLElement | null;\n  selectedOption: HTMLElement | null;\n  highlightedOption: HTMLElement | null;\n};\n\n/**\n * Event object for the listbox state machine.\n */\nexport type ListboxEvent = ListboxEventBase &\n  (\n    | {\n        type: ListboxEvents.Blur;\n        relatedTarget: EventTarget | null;\n      }\n    | {\n        type: ListboxEvents.OutsideMouseDown;\n        relatedTarget: EventTarget | null;\n      }\n    | {\n        type: ListboxEvents.OutsideMouseUp;\n        relatedTarget: EventTarget | null;\n      }\n    | {\n        type: ListboxEvents.GetDerivedData;\n        data: Partial<ListboxStateData>;\n      }\n    | {\n        type: ListboxEvents.ButtonMouseDown;\n        disabled: boolean;\n      }\n    | {\n        type: ListboxEvents.ButtonMouseUp;\n      }\n    | {\n        type: ListboxEvents.ClearNavSelection;\n      }\n    | {\n        type: ListboxEvents.OptionTouchStart;\n        value: ListboxValue;\n        disabled: boolean;\n      }\n    | {\n        type: ListboxEvents.OptionMouseEnter;\n        value: ListboxValue;\n        disabled: boolean;\n      }\n    | {\n        type: ListboxEvents.OptionMouseMove;\n        value: ListboxValue;\n        disabled: boolean;\n      }\n    | {\n        type: ListboxEvents.ValueChange;\n        value: ListboxValue;\n        callback?: ((newValue: ListboxValue) => void) | null | undefined;\n      }\n    | {\n        type: ListboxEvents.KeyDownNavigate;\n        value: ListboxValue | null;\n        disabled: boolean;\n      }\n    | {\n        type: ListboxEvents.KeyDownSearch;\n        query: string;\n        disabled: boolean;\n      }\n    | {\n        type: ListboxEvents.KeyDownEscape;\n      }\n    | {\n        type: ListboxEvents.KeyDownEnter;\n        value?: ListboxValue | null | undefined;\n        disabled?: boolean;\n        callback?: ((newValue: ListboxValue) => void) | null | undefined;\n      }\n    | {\n        type: ListboxEvents.KeyDownSpace;\n        value?: ListboxValue | null | undefined;\n        disabled?: boolean;\n        callback?: ((newValue: ListboxValue) => void) | null | undefined;\n      }\n    | {\n        type: ListboxEvents.OptionMouseDown;\n      }\n    | {\n        type: ListboxEvents.OptionMouseUp;\n        value: ListboxValue | null | undefined;\n        callback?: ((newValue: ListboxValue) => void) | null | undefined;\n        disabled: boolean;\n      }\n    | {\n        type: ListboxEvents.KeyDownTab;\n      }\n    | {\n        type: ListboxEvents.KeyDownShiftTab;\n      }\n    | {\n        type: ListboxEvents.UpdateAfterTypeahead;\n        query: string;\n        callback?: ((newValue: ListboxValue) => void) | null | undefined;\n      }\n    | {\n        type: ListboxEvents.ClearTypeahead;\n      }\n  );\n\n/**\n * State object for the listbox state machine.\n */\nexport type ListboxState = {\n  value: ListboxStates;\n  context: ListboxStateData;\n};\n\nexport type ListboxStateData = {\n  navigationValue: ListboxValue | null;\n  typeaheadQuery: string | null;\n  value: ListboxValue | null;\n  options: ListboxDescendant[];\n};\n","/**\n * Welcome to @reach/listbox!\n *\n * See NOTES.md for some background info if you're interested!\n *\n * TODO: OS-specific behavior (ie, Enter key on native select on Windows)\n * TODO: Consider hack to implement focus controls in forms on iOS\n *       https://github.com/angular/material/issues/8440\n *       Instead of a hidden select, maybe use a visually hidden select with\n *       aria-hidden. When that input gets focus, immediate send focus to the\n *       ListboxButton, then toggle the hidden input's tabIndex to prevent\n *       re-focusing it (this is just an idea, may not work, no idea how some\n *       screen-reader would deal with it).\n * TODO: Write examples showing fallback to a native select menu for users\n *       without JavaScript enabled and small-screen users.\n * TODO: Check positioning on mobile near collision points\n *       https://twitter.com/PipoPeperoni/status/1237597623508275200\n * TODO: Test arrow key navigation in forms in Firefox.\n *       Probably similar solution needed for iOS issue above.\n *       https://twitter.com/GassnerKendall/status/1237778370118598661\n *\n * @see Docs     https://reach.tech/listbox\n * @see Source   https://github.com/reach/reach-ui/tree/main/packages/listbox\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.2/#Listbox\n */\n\nimport React, {\n  forwardRef,\n  Fragment,\n  memo,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useId } from \"@reach/auto-id\";\nimport Popover, { PopoverProps, positionMatchWidth } from \"@reach/popover\";\nimport {\n  createDescendantContext,\n  Descendant,\n  DescendantProvider,\n  useDescendant,\n  useDescendantKeyDown,\n  useDescendants,\n  useDescendantsInit,\n} from \"@reach/descendants\";\nimport {\n  createNamedContext,\n  DistributiveOmit,\n  forwardRefWithAs,\n  isBoolean,\n  isFunction,\n  isRightClick,\n  isString,\n  makeId,\n  memoWithAs,\n  useCallbackProp,\n  useCheckStyles,\n  useControlledSwitchWarning,\n  useForkedRef,\n  useIsomorphicLayoutEffect as useLayoutEffect,\n  wrapEvent,\n} from \"@reach/utils\";\nimport { StateMachine, useCreateMachine, useMachine } from \"@reach/machine\";\nimport {\n  createMachineDefinition,\n  ListboxEvents,\n  ListboxStates,\n  ListboxNodeRefs,\n  ListboxStateData,\n  ListboxEvent,\n} from \"./machine\";\n\nconst DEBUG = false;\n\n////////////////////////////////////////////////////////////////////////////////\n// ListboxContext\n\nconst ListboxDescendantContext = createDescendantContext<ListboxDescendant>(\n  \"ListboxDescendantContext\"\n);\nconst ListboxContext = createNamedContext(\n  \"ListboxContext\",\n  {} as InternalListboxContextValue\n);\nconst ListboxGroupContext = createNamedContext(\n  \"ListboxGroupContext\",\n  {} as ListboxGroupContextValue\n);\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * ListboxInput\n *\n * The top-level component and context provider for the listbox.\n *\n * @see Docs https://reach.tech/listbox#listboxinput\n */\nexport const ListboxInput = forwardRef<\n  HTMLDivElement,\n  ListboxInputProps & { _componentName?: string }\n>(function ListboxInput(\n  {\n    \"aria-labelledby\": ariaLabelledBy,\n    \"aria-label\": ariaLabel,\n    children,\n    defaultValue,\n    disabled = false,\n    form,\n    name,\n    onChange: onChangeProp,\n    required,\n    value: valueProp,\n\n    // We only use this prop for console warnings\n    _componentName = \"ListboxInput\",\n    ...props\n  },\n  forwardedRef\n) {\n  let isControlled = useRef(valueProp != null);\n  let [options, setOptions] = useDescendantsInit<ListboxDescendant>();\n\n  let onChange = useCallbackProp(onChangeProp);\n\n  // DOM refs\n  let buttonRef = useRef<ListboxNodeRefs[\"button\"]>(null);\n  let hiddenInputRef = useRef<HTMLInputElement>(null);\n  let highlightedOptionRef = useRef<ListboxNodeRefs[\"highlightedOption\"]>(null);\n  let inputRef = useRef<ListboxNodeRefs[\"input\"]>(null);\n  let listRef = useRef<ListboxNodeRefs[\"list\"]>(null);\n  let popoverRef = useRef<ListboxNodeRefs[\"popover\"]>(null);\n  let selectedOptionRef = useRef<ListboxNodeRefs[\"selectedOption\"]>(null);\n\n  let machine = useCreateMachine(\n    createMachineDefinition({\n      // The initial value of our machine should come from the `value` or\n      // `defaultValue` props if they exist.\n      value: (isControlled.current ? valueProp! : defaultValue) || null,\n    })\n  );\n\n  let [state, send] = useMachine(\n    machine,\n    {\n      button: buttonRef,\n      hiddenInput: hiddenInputRef,\n      highlightedOption: highlightedOptionRef,\n      input: inputRef,\n      list: listRef,\n      popover: popoverRef,\n      selectedOption: selectedOptionRef,\n    },\n    DEBUG\n  );\n\n  // IDs for aria attributes\n  let _id = useId(props.id);\n  let id = props.id || makeId(\"listbox-input\", _id);\n\n  let ref = useForkedRef(inputRef, forwardedRef);\n\n  // If the button has children, we just render them as the label.\n  // Otherwise we'll find the option with a value that matches the listbox value\n  // and use its label in the button. We'll get that here and send it to the\n  // button via context.\n  // If a user needs the label for SSR to prevent hydration mismatch issues,\n  // they need to control the state of the component and pass a label directly\n  // to the button.\n  let valueLabel = useMemo(() => {\n    let selected = options.find(\n      (option) => option.value === state.context.value\n    );\n    return selected ? selected.label : null;\n  }, [options, state.context.value]);\n\n  let isExpanded = isListboxExpanded(state.value);\n\n  // TODO: Remove duplication and memoize\n  let context: InternalListboxContextValue = useMemo(\n    () => ({\n      ariaLabel,\n      ariaLabelledBy,\n      disabled,\n      isExpanded,\n      listboxId: id,\n      listboxValueLabel: valueLabel,\n      onValueChange: onChange,\n      buttonRef,\n      listRef,\n      popoverRef,\n      selectedOptionRef,\n      highlightedOptionRef,\n      send,\n      state: state.value as ListboxStates,\n      stateData: state.context,\n    }),\n    [\n      ariaLabel,\n      ariaLabelledBy,\n      state.value,\n      state.context,\n      disabled,\n      id,\n      isExpanded,\n      onChange,\n      send,\n      valueLabel,\n    ]\n  );\n\n  // For uncontrolled listbox components where no `defaultValue` is provided, we\n  // will update the value based on the value of the first selectable option.\n  // We call the update directly because:\n  //   A) we only ever need to do this once, so we can guard with a ref\n  //   B) useLayoutEffect races useDecendant, so we might not have options yet\n  //   C) useEffect will cause a flash\n  let mounted = useRef(false);\n  if (\n    !isControlled.current && // the app is not controlling state\n    defaultValue == null && // there is no default value\n    !mounted.current && // we haven't done this already\n    options.length // we have some options\n  ) {\n    mounted.current = true;\n    let first = options.find((option) => !option.disabled);\n    if (first && first.value) {\n      send({\n        type: ListboxEvents.ValueChange,\n        value: first.value!,\n      });\n    }\n  }\n\n  useControlledSwitchWarning(valueProp, \"value\", _componentName);\n\n  // Even if the app controls state, we still need to update it internally to\n  // run the state machine transitions\n  useControlledStateSync(valueProp, state.context.value, () => {\n    send({\n      type: ListboxEvents.ValueChange,\n      value: valueProp!,\n    });\n  });\n\n  useLayoutEffect(() => {\n    send({\n      type: ListboxEvents.GetDerivedData,\n      data: { options },\n    });\n  }, [options, send]);\n\n  useEffect(() => {\n    function handleMouseDown(event: MouseEvent) {\n      let { target, relatedTarget } = event;\n      if (!targetIsInPopover(target, popoverRef.current)) {\n        send({\n          type: ListboxEvents.OutsideMouseDown,\n          relatedTarget: relatedTarget || target,\n        });\n      }\n    }\n    if (isExpanded) {\n      window.addEventListener(\"mousedown\", handleMouseDown);\n    }\n    return () => {\n      window.removeEventListener(\"mousedown\", handleMouseDown);\n    };\n  }, [send, isExpanded]);\n\n  useEffect(() => {\n    function handleMouseUp(event: MouseEvent) {\n      let { target, relatedTarget } = event;\n      if (!targetIsInPopover(target, popoverRef.current)) {\n        send({\n          type: ListboxEvents.OutsideMouseUp,\n          relatedTarget: relatedTarget || target,\n        });\n      }\n    }\n    if (isExpanded) {\n      window.addEventListener(\"mouseup\", handleMouseUp);\n    }\n    return () => {\n      window.removeEventListener(\"mouseup\", handleMouseUp);\n    };\n  }, [send, isExpanded]);\n\n  useCheckStyles(\"listbox\");\n\n  return (\n    <DescendantProvider\n      context={ListboxDescendantContext}\n      items={options}\n      set={setOptions}\n    >\n      <ListboxContext.Provider value={context}>\n        <div\n          {...props}\n          ref={ref}\n          data-reach-listbox-input=\"\"\n          data-state={isExpanded ? \"expanded\" : \"closed\"}\n          data-value={state.context.value}\n          id={id}\n        >\n          {isFunction(children)\n            ? children({\n                id,\n                isExpanded,\n                value: state.context.value,\n                selectedOptionRef: selectedOptionRef,\n                highlightedOptionRef: highlightedOptionRef,\n                valueLabel,\n                // TODO: Remove in 1.0\n                expanded: isExpanded,\n              })\n            : children}\n        </div>\n        {(form || name || required) && (\n          <input\n            ref={hiddenInputRef}\n            data-reach-listbox-hidden-input=\"\"\n            disabled={disabled}\n            form={form}\n            name={name}\n            readOnly\n            required={required}\n            tabIndex={-1}\n            type=\"hidden\"\n            value={state.context.value || \"\"}\n          />\n        )}\n      </ListboxContext.Provider>\n    </DescendantProvider>\n  );\n});\n\nif (__DEV__) {\n  ListboxInput.displayName = \"ListboxInput\";\n  ListboxInput.propTypes = {\n    children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n    defaultValue: PropTypes.string,\n    disabled: PropTypes.bool,\n    form: PropTypes.string,\n    name: PropTypes.string,\n    onChange: PropTypes.func,\n    required: PropTypes.bool,\n    value: PropTypes.string,\n  };\n}\n\n/**\n * @see Docs https://reach.tech/listbox#listboxinput-props\n */\nexport type ListboxInputProps = Omit<\n  React.HTMLProps<HTMLDivElement>,\n  // WHY ARE THESE A THING ON A DIV, UGH\n  \"autoComplete\" | \"autoFocus\" | \"form\" | \"name\" | \"onChange\" | \"defaultValue\"\n> &\n  Pick<\n    React.SelectHTMLAttributes<HTMLSelectElement>,\n    \"form\" | \"name\" | \"required\"\n  > & {\n    /**\n     * The composed listbox expects to receive `ListboxButton` and\n     * `ListboxPopover` as children. You can also pass in arbitrary wrapper\n     * elements if desired.\n     *\n     * @see Docs https://reach.tech/listbox#listboxinput-children\n     */\n    children:\n      | React.ReactNode\n      | ((\n          props: ListboxContextValue & {\n            // TODO: Remove in 1.0\n            expanded: boolean;\n          }\n        ) => React.ReactNode);\n    /**\n     * The default value of an uncontrolled listbox.\n     *\n     * @see Docs https://reach.tech/listbox#listboxinput-defaultvalue\n     */\n    defaultValue?: ListboxValue;\n    /**\n     * Whether or not the listbox is disabled.\n     *\n     * @see Docs https://reach.tech/listbox#listboxinput-disabled\n     */\n    disabled?: boolean;\n    /**\n     * The callback that fires when the listbox value changes.\n     *\n     * @see Docs https://reach.tech/listbox#listboxinput-onchange\n     * @param newValue\n     */\n    onChange?(newValue: ListboxValue): void;\n    /**\n     * The current value of a controlled listbox.\n     *\n     * @see Docs https://reach.tech/listbox#listboxinput-value\n     */\n    value?: ListboxValue;\n  };\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Listbox\n *\n * High-level listbox API\n *\n * @example\n * <Listbox>\n *   <ListboxOption value=\"1\">Option 1</ListboxOption>\n *   <ListboxOption value=\"2\">Option 2</ListboxOption>\n *   <ListboxOption value=\"3\">Option 3</ListboxOption>\n * </Listbox>\n *\n * @see Docs https://reach.tech/listbox#listbox-1\n */\nexport const Listbox = forwardRef<HTMLDivElement, ListboxProps>(\n  function Listbox(\n    { arrow = \"▼\", button, children, portal = true, ...props },\n    forwardedRef\n  ) {\n    return (\n      <ListboxInput {...props} _componentName=\"Listbox\" ref={forwardedRef}>\n        {({ value, valueLabel }) => (\n          <Fragment>\n            <ListboxButton\n              arrow={arrow}\n              children={\n                button\n                  ? isFunction(button)\n                    ? button({ value, label: valueLabel })\n                    : button\n                  : undefined\n              }\n            />\n            <ListboxPopover portal={portal}>\n              <ListboxList>{children}</ListboxList>\n            </ListboxPopover>\n          </Fragment>\n        )}\n      </ListboxInput>\n    );\n  }\n);\n\nif (__DEV__) {\n  Listbox.displayName = \"Listbox\";\n  Listbox.propTypes = {\n    ...ListboxInput.propTypes,\n    arrow: PropTypes.oneOfType([PropTypes.node, PropTypes.bool]),\n    button: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),\n    children: PropTypes.node,\n  };\n}\n\n/**\n * @see Docs https://reach.tech/listbox#listbox-props\n */\nexport type ListboxProps = Omit<ListboxInputProps, \"children\"> & {\n  /**\n   * Renders a text string or React node to represent an arrow inside the\n   * Listbox button.\n   *\n   * @see Docs https://reach.tech/listbox#listbox-arrow\n   */\n  arrow?: React.ReactNode | boolean;\n  /**\n   * A render function or React node to to render the Listbox button's inner\n   * content. See the API for the ListboxButton children prop for details.\n   *\n   * @see Docs https://reach.tech/listbox#listbox-button\n   */\n  button?:\n    | React.ReactNode\n    | ((props: {\n        value: ListboxValue | null;\n        label: string | null;\n      }) => React.ReactNode);\n  children: React.ReactNode;\n  /**\n   * Whether or not the popover should be rendered inside a portal. Defaults to\n   * `true`.\n   *\n   * @see Docs https://reach.tech/listbox#listbox-portal\n   */\n  portal?: boolean;\n};\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * ListboxButton\n *\n * The interactive toggle button that triggers the popover for the listbox.\n *\n * @see Docs https://reach.tech/listbox#listbox-button\n */\nconst ListboxButtonImpl = forwardRefWithAs<ListboxButtonProps, \"span\">(\n  function ListboxButton(\n    {\n      \"aria-label\": ariaLabel,\n      arrow = false,\n      as: Comp = \"span\",\n      children,\n      onKeyDown,\n      onMouseDown,\n      onMouseUp,\n      ...props\n    },\n    forwardedRef\n  ) {\n    let {\n      ariaLabelledBy,\n      buttonRef,\n      disabled,\n      isExpanded,\n      listboxId,\n      stateData,\n      send,\n      listboxValueLabel,\n    } = useContext(ListboxContext);\n    let listboxValue = stateData.value;\n\n    let ref = useForkedRef(buttonRef, forwardedRef);\n\n    let handleKeyDown = useKeyDown();\n\n    function handleMouseDown(event: React.MouseEvent) {\n      if (!isRightClick(event.nativeEvent)) {\n        event.preventDefault();\n        event.stopPropagation();\n        send({\n          type: ListboxEvents.ButtonMouseDown,\n          disabled,\n        });\n      }\n    }\n\n    function handleMouseUp(event: React.MouseEvent) {\n      if (!isRightClick(event.nativeEvent)) {\n        event.preventDefault();\n        event.stopPropagation();\n        send({ type: ListboxEvents.ButtonMouseUp });\n      }\n    }\n\n    let id = makeId(\"button\", listboxId);\n\n    // If the button has children, we just render them as the label\n    // If a user needs the label on the server to prevent hydration mismatch\n    // errors, they need to control the state of the component and pass a label\n    // directly to the button.\n    let label: React.ReactNode = useMemo(() => {\n      if (!children) {\n        return listboxValueLabel;\n      } else if (isFunction(children)) {\n        return children({\n          isExpanded,\n          label: listboxValueLabel!,\n          value: listboxValue,\n          // TODO: Remove in 1.0\n          expanded: isExpanded,\n        });\n      }\n      return children;\n    }, [children, listboxValueLabel, isExpanded, listboxValue]);\n\n    return (\n      <Comp\n        // Applicable to all host language elements regardless of whether a\n        // `role` is applied.\n        // https://www.w3.org/WAI/PF/aria/states_and_properties#global_states_header\n        aria-disabled={disabled || undefined}\n        // Set by the JavaScript when the listbox is displayed. Otherwise, is\n        // not present.\n        // https://www.w3.org/TR/wai-aria-practices-1.2/examples/listbox/listbox-collapsible.html\n        aria-expanded={isExpanded || undefined}\n        // Indicates that activating the button displays a listbox.\n        // https://www.w3.org/TR/wai-aria-practices-1.2/examples/listbox/listbox-collapsible.html\n        aria-haspopup=\"listbox\"\n        // References the two elements whose labels are concatenated by the\n        // browser to label the button. The first element is a span containing\n        // perceivable label for the listbox component. The second element is\n        // the button itself; the button text is set to the name of the\n        // currently chosen element.\n        // https://www.w3.org/TR/wai-aria-practices-1.2/examples/listbox/listbox-collapsible.html\n        // If an `aria-label` is passed, we should skip `aria-labelledby` to\n        // avoid confusion.\n        aria-labelledby={\n          ariaLabel ? undefined : [ariaLabelledBy, id].filter(Boolean).join(\" \")\n        }\n        aria-label={ariaLabel}\n        // Identifies the element as a button widget.\n        // https://www.w3.org/TR/wai-aria-practices-1.2/examples/button/button.html\n        role=\"button\"\n        // Includes the element in the tab sequence.\n        // https://www.w3.org/TR/wai-aria-practices-1.2/examples/button/button.html\n        tabIndex={disabled ? -1 : 0}\n        {...props}\n        ref={ref}\n        data-reach-listbox-button=\"\"\n        id={id}\n        onKeyDown={wrapEvent(onKeyDown, handleKeyDown)}\n        onMouseDown={wrapEvent(onMouseDown, handleMouseDown)}\n        onMouseUp={wrapEvent(onMouseUp, handleMouseUp)}\n      >\n        {label}\n        {arrow && (\n          <ListboxArrow>{isBoolean(arrow) ? null : arrow}</ListboxArrow>\n        )}\n      </Comp>\n    );\n  }\n);\n\nif (__DEV__) {\n  ListboxButtonImpl.displayName = \"ListboxButton\";\n  ListboxButtonImpl.propTypes = {\n    arrow: PropTypes.oneOfType([PropTypes.node, PropTypes.bool]),\n    children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  };\n}\n\nexport const ListboxButton = memoWithAs(ListboxButtonImpl);\n\n/**\n * @see Docs https://reach.tech/listbox#listboxbutton-props\n */\nexport type ListboxButtonProps = {\n  /**\n   * Renders a text string or React node to represent an arrow inside the\n   * button.\n   *\n   * @see Docs https://reach.tech/listbox#listboxbutton-arrow\n   */\n  arrow?: React.ReactNode | boolean;\n  /**\n   * A render function or React node to to render the Listbox button's inner\n   * content.\n   *\n   * By default, the button will display the text label of the selected option\n   * as its inner content. This label can be pulled from the option's inner\n   * text content or explicitly provided to the ListboxOption component via the\n   * label prop. If you want to render the button differently from its default,\n   * you must pass children.\n   *\n   * It's important to note that the ListboxButton's default inner content\n   * cannot be server-side rendered. On the initial render, the button has no\n   * contextual information about the available options in a Listbox. As each\n   * ListboxOption is rendered, it is registered in a context object and updated\n   * at the top of the Listbox tree, which evaluates the options and their props\n   * to determine which option is selectable and which label to display inside\n   * the button. If you need the inner content of the button on the first render\n   * you must control the listbox's state and keep its options' values and\n   * labels in data at the top of the tree, and render the button directly via\n   * children.\n   *\n   * @example\n   * let options = { one: 'One option', two: 'Another option' }\n   * let [value, setValue] = useState(options.one)\n   * return (\n   *   <ListboxInput>\n   *     <ListboxButton>{options[value]}</ListboxButton>\n   *     <ListboxPopover>\n   *       <ListboxList>\n   *         {Object.keys(options).map(option => (\n   *           <ListboxOption key={option} value={option} label={options[option]}>\n   *             {options[option]}\n   *           </ListboxOption>\n   *         ))}\n   *       </ListboxList>\n   *     </ListboxPopover>\n   *   </ListboxInput>\n   * )\n   */\n  children?:\n    | React.ReactNode\n    | ((props: {\n        value: ListboxValue | null;\n        label: string;\n        isExpanded: boolean;\n        // TODO: Remove in 1.0\n        expanded: boolean;\n      }) => React.ReactNode);\n};\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * ListboxArrow\n *\n * A wrapper component for an arrow to display in the `ListboxButton`\n *\n * @see Docs https://reach.tech/listbox#listboxarrow\n */\nconst ListboxArrowImpl = forwardRef<HTMLSpanElement, ListboxArrowProps>(\n  function ListboxArrow({ children, ...props }, forwardedRef) {\n    let { isExpanded } = useContext(ListboxContext);\n    return (\n      <span\n        // The arrow provides no semantic value and its inner content should be\n        // hidden from the accessibility tree\n        aria-hidden\n        {...props}\n        ref={forwardedRef}\n        data-reach-listbox-arrow=\"\"\n        data-expanded={isExpanded ? \"\" : undefined}\n      >\n        {isFunction(children)\n          ? children({\n              isExpanded,\n              // TODO: Remove in 1.0\n              expanded: isExpanded,\n            })\n          : children || \"▼\"}\n      </span>\n    );\n  }\n);\n\nif (__DEV__) {\n  ListboxArrowImpl.displayName = \"ListboxArrow\";\n  ListboxArrowImpl.propTypes = {\n    children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  };\n}\n\nexport const ListboxArrow = memo(ListboxArrowImpl);\n\n/**\n * @see Docs https://reach.tech/listbox#listboxarrow-props\n */\nexport type ListboxArrowProps = React.HTMLProps<HTMLSpanElement> & {\n  /**\n   * Children to render as the listbox button's arrow. This can be a render\n   * function that accepts the listbox's expanded state as an argument.\n   */\n  children?:\n    | React.ReactNode\n    | ((props: {\n        isExpanded: boolean;\n        // TODO: Remove in 1.0\n        expanded: boolean;\n      }) => React.ReactNode);\n};\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * ListboxPopover\n *\n * The popover containing the list of options.\n *\n * @see Docs https://reach.tech/listbox#listboxpopover\n */\nconst ListboxPopoverImpl = forwardRef<any, ListboxPopoverProps>(\n  function ListboxPopover(\n    {\n      position = positionMatchWidth,\n      onBlur,\n      onKeyDown,\n      portal = true,\n      unstable_observableRefs,\n      ...props\n    },\n    forwardedRef\n  ) {\n    let { buttonRef, popoverRef, send, isExpanded } = useContext(\n      ListboxContext\n    );\n    let ref = useForkedRef(popoverRef, forwardedRef);\n\n    let handleKeyDown = useKeyDown();\n\n    let commonProps = {\n      hidden: !isExpanded,\n      tabIndex: -1,\n      ...props,\n      ref,\n      \"data-reach-listbox-popover\": \"\",\n      onBlur: wrapEvent(onBlur, handleBlur),\n      onKeyDown: wrapEvent(onKeyDown, handleKeyDown),\n    };\n\n    function handleBlur(event: React.FocusEvent) {\n      let { nativeEvent } = event;\n      requestAnimationFrame(() => {\n        send({\n          type: ListboxEvents.Blur,\n          relatedTarget: nativeEvent.relatedTarget || nativeEvent.target,\n        });\n      });\n    }\n\n    return portal ? (\n      <Popover\n        {...commonProps}\n        targetRef={buttonRef as any}\n        position={position}\n        unstable_observableRefs={unstable_observableRefs}\n      />\n    ) : (\n      <div {...commonProps} />\n    );\n  }\n);\n\nif (__DEV__) {\n  ListboxPopoverImpl.displayName = \"ListboxPopover\";\n  ListboxPopoverImpl.propTypes = {\n    children: PropTypes.node.isRequired,\n    portal: PropTypes.bool,\n    position: PropTypes.func,\n  };\n}\n\nexport const ListboxPopover = memo(ListboxPopoverImpl);\n\n/**\n * @see Docs https://reach.tech/listbox#listboxpopover-props\n */\nexport type ListboxPopoverProps = React.HTMLProps<HTMLDivElement> & {\n  /**\n   * `ListboxPopover` expects to receive `ListboxList` as its children.\n   *\n   * @see Docs https://reach.tech/listbox#listboxpopover-children\n   */\n  children: React.ReactNode;\n  /**\n   * Whether or not the popover should be rendered inside a portal. Defaults to\n   * `true`\n   *\n   * @see Docs https://reach.tech/listbox#listboxpopover-portal\n   */\n  portal?: boolean;\n  /**\n   * The positioning function for the popover.\n   *\n   * @see Docs https://reach.tech/listbox#listboxpopover-position\n   */\n  position?: PopoverProps[\"position\"];\n  unstable_observableRefs?: PopoverProps[\"unstable_observableRefs\"];\n};\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * ListboxList\n *\n * The list containing all listbox options.\n *\n * @see Docs https://reach.tech/listbox#listboxlist\n */\nexport const ListboxList = forwardRefWithAs<ListboxListProps, \"ul\">(\n  function ListboxList({ as: Comp = \"ul\", ...props }, forwardedRef) {\n    let {\n      ariaLabel,\n      ariaLabelledBy,\n      isExpanded,\n      listboxId,\n      listRef,\n      stateData: { value, navigationValue },\n    } = useContext(ListboxContext);\n    let ref = useForkedRef(forwardedRef, listRef);\n\n    return (\n      <Comp\n        // Tells assistive technologies which of the options, if any, is\n        // visually indicated as having keyboard focus. DOM focus remains on the\n        // `ul` element and the idref specified for `aria-activedescendant`\n        // refers to the `li` element that is visually styled as focused. When\n        // navigation keys, such as `Down Arrow`, are pressed, the JavaScript\n        // changes the value.\n        // https://www.w3.org/TR/wai-aria-practices-1.2/examples/listbox/listbox-grouped.html\n        aria-activedescendant={useOptionId(\n          isExpanded ? navigationValue : value\n        )}\n        // If the listbox is not part of another widget, then it has a visible\n        // label referenced by `aria-labelledby` on the element with role\n        // `listbox`.\n        // https://www.w3.org/TR/wai-aria-practices-1.2/#Listbox\n        // If an `aria-label` is passed, we should skip `aria-labelledby` to\n        // avoid confusion.\n        aria-labelledby={ariaLabel ? undefined : ariaLabelledBy}\n        aria-label={ariaLabel}\n        // An element that contains or owns all the listbox options has role\n        // listbox.\n        // https://www.w3.org/TR/wai-aria-practices-1.2/#Listbox\n        role=\"listbox\"\n        // https://www.w3.org/TR/wai-aria-practices-1.2/examples/listbox/listbox-collapsible.html\n        tabIndex={-1}\n        {...props}\n        ref={ref}\n        data-reach-listbox-list=\"\"\n        id={makeId(\"listbox\", listboxId)}\n      />\n    );\n  }\n);\n\nif (__DEV__) {\n  ListboxList.displayName = \"ListboxList\";\n  ListboxList.propTypes = {};\n}\n\n/**\n * @see Docs https://reach.tech/listbox#listboxlist-props\n */\nexport type ListboxListProps = {};\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * ListboxOption\n *\n * A selectable option for the listbox.\n *\n * @see Docs https://reach.tech/listbox#listboxoption\n */\nexport const ListboxOption = forwardRefWithAs<ListboxOptionProps, \"li\">(\n  function ListboxOption(\n    {\n      as: Comp = \"li\",\n      children,\n      disabled,\n      onMouseDown,\n      onMouseEnter,\n      onMouseLeave,\n      onMouseMove,\n      onMouseUp,\n      onTouchStart,\n      value,\n      label: labelProp,\n      ...props\n    },\n    forwardedRef\n  ) {\n    if (__DEV__ && !value) {\n      throw Error(`A ListboxOption must have a value prop.`);\n    }\n\n    let {\n      highlightedOptionRef,\n      isExpanded,\n      onValueChange,\n      selectedOptionRef,\n      send,\n      state,\n      stateData: { value: listboxValue, navigationValue },\n    } = useContext(ListboxContext);\n\n    let [labelState, setLabel] = useState(labelProp);\n    let label = labelProp || labelState || \"\";\n\n    let ownRef = useRef<HTMLElement | null>(null);\n    useDescendant(\n      {\n        element: ownRef.current!,\n        value,\n        label,\n        disabled: !!disabled,\n      },\n      ListboxDescendantContext\n    );\n\n    // After the ref is mounted to the DOM node, we check to see if we have an\n    // explicit label prop before looking for the node's textContent for\n    // typeahead functionality.\n    let getLabelFromDomNode = useCallback(\n      (node: HTMLElement) => {\n        if (!labelProp && node) {\n          setLabel((prevState) => {\n            if (node.textContent && prevState !== node.textContent) {\n              return node.textContent;\n            }\n            return prevState || \"\";\n          });\n        }\n      },\n      [labelProp]\n    );\n\n    let isHighlighted = navigationValue ? navigationValue === value : false;\n    let isSelected = listboxValue === value;\n\n    let ref = useForkedRef(\n      getLabelFromDomNode,\n      forwardedRef,\n      ownRef,\n      isSelected ? selectedOptionRef : null,\n      isHighlighted ? highlightedOptionRef : null\n    );\n\n    function handleMouseEnter() {\n      send({\n        type: ListboxEvents.OptionMouseEnter,\n        value,\n        disabled: !!disabled,\n      });\n    }\n\n    function handleTouchStart() {\n      send({\n        type: ListboxEvents.OptionTouchStart,\n        value,\n        disabled: !!disabled,\n      });\n    }\n\n    function handleMouseLeave() {\n      send({ type: ListboxEvents.ClearNavSelection });\n    }\n\n    function handleMouseDown(event: React.MouseEvent) {\n      // Prevent blur event from firing and bubbling to the popover\n      if (!isRightClick(event.nativeEvent)) {\n        event.preventDefault();\n        send({ type: ListboxEvents.OptionMouseDown });\n      }\n    }\n\n    function handleMouseUp(event: React.MouseEvent) {\n      if (!isRightClick(event.nativeEvent)) {\n        send({\n          type: ListboxEvents.OptionMouseUp,\n          value,\n          callback: onValueChange,\n          disabled: !!disabled,\n        });\n      }\n    }\n\n    function handleMouseMove() {\n      // We don't really *need* these guards since we put all of our transition\n      // logic in the state machine, but in this case it seems wise not to\n      // needlessly run our transitions every time the user's mouse moves. Seems\n      // like a lot. 🙃\n      if (state === ListboxStates.Open || navigationValue !== value) {\n        send({\n          type: ListboxEvents.OptionMouseMove,\n          value,\n          disabled: !!disabled,\n        });\n      }\n    }\n\n    return (\n      <Comp\n        // In a single-select listbox, the selected option has `aria-selected`\n        // set to `true`.\n        // https://www.w3.org/TR/wai-aria-practices-1.2/#Listbox\n        aria-selected={(isExpanded ? isHighlighted : isSelected) || undefined}\n        // Applicable to all host language elements regardless of whether a\n        // `role` is applied.\n        // https://www.w3.org/WAI/PF/aria/states_and_properties#global_states_header\n        aria-disabled={disabled || undefined}\n        // Each option in the listbox has role `option` and is a DOM descendant\n        // of the element with role `listbox`.\n        // https://www.w3.org/TR/wai-aria-practices-1.2/#Listbox\n        role=\"option\"\n        {...props}\n        ref={ref}\n        id={useOptionId(value)}\n        data-reach-listbox-option=\"\"\n        data-current={isSelected ? \"\" : undefined}\n        data-label={label}\n        data-value={value}\n        onMouseDown={wrapEvent(onMouseDown, handleMouseDown)}\n        onMouseEnter={wrapEvent(onMouseEnter, handleMouseEnter)}\n        onMouseLeave={wrapEvent(onMouseLeave, handleMouseLeave)}\n        onMouseMove={wrapEvent(onMouseMove, handleMouseMove)}\n        onMouseUp={wrapEvent(onMouseUp, handleMouseUp)}\n        onTouchStart={wrapEvent(onTouchStart, handleTouchStart)}\n      >\n        {children}\n      </Comp>\n    );\n  }\n);\n\nif (__DEV__) {\n  ListboxOption.displayName = \"ListboxOption\";\n  ListboxOption.propTypes = {\n    disabled: PropTypes.bool,\n    label: PropTypes.string,\n    value: PropTypes.string.isRequired,\n  };\n}\n\n/**\n * @see Docs https://reach.tech/listbox#listboxoption-props\n */\nexport type ListboxOptionProps = {\n  /**\n   * The option's value. This will be passed into a hidden input field for use\n   * in forms.\n   *\n   * @see Docs https://reach.tech/listbox#listboxoption-value\n   */\n  value: ListboxValue;\n  /**\n   * The option's human-readable label. This prop is optional but highly\n   * encouraged if your option has multiple text nodes that may or may not\n   * correlate with the intended value. It is also useful if the inner text node\n   * begins with a character other than a readable letter (like an emoji or\n   * symbol) so that typeahead works as expected for the user.\n   *\n   * @see Docs https://reach.tech/listbox#listboxoption-label\n   */\n  label?: string;\n  /**\n   * Whether or not the option is disabled from selection and navigation.\n   *\n   * @see Docs https://reach.tech/listbox#listboxoption-disabled\n   */\n  disabled?: boolean;\n};\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * ListboxGroup\n *\n * A group of related listbox options.\n *\n * @see Docs https://reach.tech/listbox#listboxgroup\n */\nexport const ListboxGroup = forwardRef<HTMLDivElement, ListboxGroupProps>(\n  function ListboxGroup({ label, children, ...props }, forwardedRef) {\n    let { listboxId } = useContext(ListboxContext);\n    let labelId = makeId(\"label\", useId(props.id), listboxId);\n    return (\n      <ListboxGroupContext.Provider value={{ labelId }}>\n        <div\n          // Refers to the element containing the option group label\n          // https://www.w3.org/TR/wai-aria-practices-1.2/examples/listbox/listbox-grouped.html\n          aria-labelledby={labelId}\n          // Identifies a group of related options\n          // https://www.w3.org/TR/wai-aria-practices-1.2/examples/listbox/listbox-grouped.html\n          role=\"group\"\n          {...props}\n          data-reach-listbox-group=\"\"\n          ref={forwardedRef}\n        >\n          {label && <ListboxGroupLabel>{label}</ListboxGroupLabel>}\n          {children}\n        </div>\n      </ListboxGroupContext.Provider>\n    );\n  }\n);\n\nif (__DEV__) {\n  ListboxGroup.displayName = \"ListboxGroup\";\n  ListboxGroup.propTypes = {\n    label: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n  };\n}\n\n/**\n * @see Docs https://reach.tech/listbox#listboxgroup-props\n */\nexport type ListboxGroupProps = Omit<\n  React.HTMLProps<HTMLDivElement>,\n  \"label\"\n> & {\n  /**\n   * The text label to use for the listbox group. This can be omitted if a\n   * group contains a `ListboxGroupLabel` component. The label should always\n   * be human-readable.\n   *\n   * @see Docs https://reach.tech/listbox#listboxgroup-label\n   */\n  label?: React.ReactNode;\n};\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * ListboxGroupLabel\n *\n * @see Docs https://reach.tech/listbox#listboxgrouplabel\n */\nexport const ListboxGroupLabel = forwardRefWithAs<\n  ListboxGroupLabelProps,\n  \"span\"\n>(function ListboxGroupLabel({ as: Comp = \"span\", ...props }, forwardedRef) {\n  let { labelId } = useContext(ListboxGroupContext);\n  return (\n    <Comp\n      // See examples\n      // https://www.w3.org/TR/wai-aria-practices-1.2/examples/listbox/listbox-grouped.html\n      role=\"presentation\"\n      {...props}\n      ref={forwardedRef}\n      data-reach-listbox-group-label=\"\"\n      id={labelId}\n    />\n  );\n});\n\nif (__DEV__) {\n  ListboxGroupLabel.displayName = \"ListboxGroupLabel\";\n  ListboxGroupLabel.propTypes = {};\n}\n\n/**\n * @see Docs https://reach.tech/listbox#listboxgroup-props\n */\nexport type ListboxGroupLabelProps = {};\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hook that exposes data for a given `Listbox` component to its descendants.\n *\n * @see Docs https://reach.tech/listbox#uselistboxcontext\n */\nexport function useListboxContext(): ListboxContextValue {\n  let {\n    highlightedOptionRef,\n    listboxId,\n    listboxValueLabel,\n    isExpanded,\n    selectedOptionRef,\n    stateData: { value },\n  } = useContext(ListboxContext);\n  return useMemo(\n    () => ({\n      id: listboxId,\n      isExpanded,\n      selectedOptionRef: selectedOptionRef,\n      highlightedOptionRef: highlightedOptionRef,\n      value,\n      valueLabel: listboxValueLabel,\n    }),\n    [\n      listboxId,\n      isExpanded,\n      value,\n      listboxValueLabel,\n      selectedOptionRef,\n      highlightedOptionRef,\n    ]\n  );\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nfunction isListboxExpanded(state: string) {\n  return [\n    ListboxStates.Navigating,\n    ListboxStates.Open,\n    ListboxStates.Dragging,\n    ListboxStates.Interacting,\n  ].includes(state as ListboxStates);\n}\n\nfunction useKeyDown() {\n  let {\n    disabled: listboxDisabled,\n    onValueChange,\n    stateData: { navigationValue, typeaheadQuery },\n    send,\n  } = useContext(ListboxContext);\n  let options = useDescendants(ListboxDescendantContext);\n\n  useEffect(() => {\n    if (typeaheadQuery) {\n      send({\n        type: ListboxEvents.UpdateAfterTypeahead,\n        query: typeaheadQuery,\n        callback: onValueChange,\n      });\n    }\n    let timeout = window.setTimeout(() => {\n      if (typeaheadQuery != null) {\n        send({ type: ListboxEvents.ClearTypeahead });\n      }\n    }, 1000);\n    return () => {\n      window.clearTimeout(timeout);\n    };\n  }, [onValueChange, send, typeaheadQuery]);\n\n  let index = options.findIndex(({ value }) => value === navigationValue);\n\n  let handleKeyDown = wrapEvent(\n    function (event: React.KeyboardEvent) {\n      let { key } = event;\n      let isSearching = isString(key) && key.length === 1;\n      let navOption = options.find(\n        (option) => option.value === navigationValue\n      );\n      switch (key) {\n        case \"Enter\":\n          send({\n            type: ListboxEvents.KeyDownEnter,\n            value: navigationValue,\n            callback: onValueChange,\n            disabled: !!(navOption?.disabled || listboxDisabled),\n          });\n          return;\n        case \" \":\n          // Prevent browser from scrolling down\n          event.preventDefault();\n          send({\n            type: ListboxEvents.KeyDownSpace,\n            value: navigationValue,\n            callback: onValueChange,\n            disabled: !!(navOption?.disabled || listboxDisabled),\n          });\n          return;\n        case \"Escape\":\n          send({ type: ListboxEvents.KeyDownEscape });\n          return;\n        case \"Tab\":\n          let eventType = event.shiftKey\n            ? ListboxEvents.KeyDownShiftTab\n            : ListboxEvents.KeyDownTab;\n          send({ type: eventType });\n          return;\n        default:\n          if (isSearching) {\n            send({\n              type: ListboxEvents.KeyDownSearch,\n              query: key,\n              disabled: listboxDisabled,\n            });\n          }\n          return;\n      }\n    },\n\n    useDescendantKeyDown(ListboxDescendantContext, {\n      currentIndex: index,\n      orientation: \"vertical\",\n      key: \"index\",\n      rotate: true,\n      filter: (option) => !option.disabled,\n      callback(nextIndex: number) {\n        send({\n          type: ListboxEvents.KeyDownNavigate,\n          value: options[nextIndex].value,\n          disabled: listboxDisabled,\n        });\n      },\n    })\n  );\n\n  return handleKeyDown;\n}\n\nfunction useOptionId(value: ListboxValue | null) {\n  let { listboxId } = useContext(ListboxContext);\n  return value ? makeId(`option-${value}`, listboxId) : undefined;\n}\n\nfunction targetIsInPopover(\n  element: HTMLElement | EventTarget | null,\n  popover: HTMLElement | null\n) {\n  return !!(element === popover || popover?.contains(element as HTMLElement));\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Types\n\nexport type ListboxValue = string;\n\nexport type ListboxDescendant = Descendant<HTMLElement> & {\n  value: ListboxValue;\n  label: string;\n  disabled: boolean;\n};\n\nexport type ListboxContextValue = {\n  id: string | undefined;\n  isExpanded: boolean;\n  highlightedOptionRef: React.RefObject<ListboxNodeRefs[\"highlightedOption\"]>;\n  selectedOptionRef: React.RefObject<ListboxNodeRefs[\"selectedOption\"]>;\n  value: ListboxValue | null;\n  valueLabel: string | null;\n};\n\ninterface InternalListboxContextValue {\n  ariaLabel?: string;\n  ariaLabelledBy?: string;\n  buttonRef: React.RefObject<ListboxNodeRefs[\"button\"]>;\n  isExpanded: boolean;\n  listRef: React.RefObject<ListboxNodeRefs[\"list\"]>;\n  popoverRef: React.RefObject<ListboxNodeRefs[\"popover\"]>;\n  selectedOptionRef: React.RefObject<ListboxNodeRefs[\"selectedOption\"]>;\n  highlightedOptionRef: React.RefObject<ListboxNodeRefs[\"highlightedOption\"]>;\n  disabled: boolean;\n  listboxId: string;\n  listboxValueLabel: string | null;\n  onValueChange: ((newValue: ListboxValue) => void) | null | undefined;\n  send: StateMachine.Service<\n    ListboxStateData,\n    DistributiveOmit<ListboxEvent, \"refs\">\n  >[\"send\"];\n  state: ListboxStates;\n  stateData: ListboxStateData;\n}\n\ninterface ListboxGroupContextValue {\n  labelId: string;\n}\n\nfunction useControlledStateSync<T>(\n  controlPropValue: T | undefined,\n  internalValue: T,\n  send: any\n) {\n  let { current: isControlled } = useRef(controlPropValue != null);\n  if (isControlled && controlPropValue !== internalValue) {\n    send();\n  }\n}\n"],"names":["ListboxStates","ListboxEvents","clearNavigationValue","assign","navigationValue","clearTypeahead","typeaheadQuery","assignValue","value","_","event","navigate","data","navigateFromCurrentValue","selected","findOptionFromValue","options","disabled","find","option","listboxLostFocus","type","Blur","refs","list","popover","relatedTarget","ownerDocument","getOwnerDocument","document","activeElement","contains","clickedOutsideOfListbox","OutsideMouseDown","OutsideMouseUp","button","optionIsActive","shouldNavigate","focusList","requestAnimationFrame","focus","focusButton","listboxIsNotDisabled","optionIsNavigable","OptionTouchStart","optionIsSelectable","selectOption","callback","submitForm","KeyDownEnter","hiddenInput","form","submitButton","querySelector","click","setTypeahead","query","setValueFromTypeahead","UpdateAfterTypeahead","match","findOptionFromTypeahead","setNavSelectionFromTypeahead","commonEvents","GetDerivedData","actions","ctx","ValueChange","createMachineDefinition","id","initial","Idle","context","states","on","ButtonMouseDown","target","Open","cond","KeyDownSpace","Navigating","KeyDownSearch","ClearTypeahead","KeyDownNavigate","Interacting","entry","ClearNavSelection","KeyDownEscape","OptionMouseDown","Dragging","OptionMouseEnter","ButtonMouseUp","OptionMouseMove","OptionMouseUp","string","found","label","toLowerCase","startsWith","undefined","DEBUG","ListboxDescendantContext","createDescendantContext","ListboxContext","createNamedContext","ListboxGroupContext","ListboxInput","forwardRef","forwardedRef","ariaLabelledBy","ariaLabel","children","defaultValue","name","onChangeProp","onChange","required","valueProp","_componentName","props","isControlled","useRef","useDescendantsInit","setOptions","useCallbackProp","buttonRef","hiddenInputRef","highlightedOptionRef","inputRef","listRef","popoverRef","selectedOptionRef","machine","useCreateMachine","current","useMachine","highlightedOption","input","selectedOption","state","send","_id","useId","makeId","ref","useForkedRef","valueLabel","useMemo","isExpanded","isListboxExpanded","listboxId","listboxValueLabel","onValueChange","stateData","mounted","length","first","useControlledSwitchWarning","useControlledStateSync","useLayoutEffect","useEffect","handleMouseDown","targetIsInPopover","window","addEventListener","removeEventListener","handleMouseUp","useCheckStyles","React","DescendantProvider","items","set","Provider","isFunction","expanded","readOnly","tabIndex","displayName","propTypes","PropTypes","oneOfType","node","func","bool","Listbox","arrow","portal","Fragment","ListboxButton","ListboxPopover","ListboxList","ListboxButtonImpl","forwardRefWithAs","as","Comp","onKeyDown","onMouseDown","onMouseUp","useContext","listboxValue","handleKeyDown","useKeyDown","isRightClick","nativeEvent","preventDefault","stopPropagation","filter","Boolean","join","role","wrapEvent","ListboxArrow","isBoolean","memoWithAs","ListboxArrowImpl","memo","ListboxPopoverImpl","position","positionMatchWidth","onBlur","unstable_observableRefs","commonProps","hidden","handleBlur","Popover","targetRef","isRequired","useOptionId","ListboxOption","onMouseEnter","onMouseLeave","onMouseMove","onTouchStart","labelProp","Error","useState","labelState","setLabel","ownRef","useDescendant","element","getLabelFromDomNode","useCallback","prevState","textContent","isHighlighted","isSelected","handleMouseEnter","handleTouchStart","handleMouseLeave","handleMouseMove","ListboxGroup","labelId","ListboxGroupLabel","useListboxContext","includes","listboxDisabled","useDescendants","timeout","setTimeout","clearTimeout","index","findIndex","key","isSearching","isString","navOption","eventType","shiftKey","KeyDownShiftTab","KeyDownTab","useDescendantKeyDown","currentIndex","orientation","rotate","nextIndex","controlPropValue","internalValue"],"mappings":"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"}