{"id":"node_modules/@reach/auto-id/dist/auto-id.esm.js","dependencies":[{"name":"/home/idrisakmal/Projects/test_project/node_modules/@reach/auto-id/dist/auto-id.esm.js.map","includedInParent":true,"mtime":1601093623418},{"name":"/home/idrisakmal/Projects/test_project/package.json","includedInParent":true,"mtime":1601093629058},{"name":"/home/idrisakmal/Projects/test_project/.babelrc","includedInParent":true,"mtime":1601090860008},{"name":"/home/idrisakmal/Projects/test_project/node_modules/@reach/auto-id/package.json","includedInParent":true,"mtime":1601093623418},{"name":"react","loc":{"line":1,"column":36},"parent":"/home/idrisakmal/Projects/test_project/node_modules/@reach/auto-id/dist/auto-id.esm.js","resolved":"/home/idrisakmal/Projects/test_project/node_modules/react/index.js"},{"name":"@reach/utils","loc":{"line":2,"column":42},"parent":"/home/idrisakmal/Projects/test_project/node_modules/@reach/auto-id/dist/auto-id.esm.js","resolved":"/home/idrisakmal/Projects/test_project/node_modules/@reach/utils/dist/utils.esm.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useId = void 0;\n\nvar _react = require(\"react\");\n\nvar _utils = require(\"@reach/utils\");\n\n/*\r\n * Welcome to @reach/auto-id!\r\n\n * Let's see if we can make sense of why this hook exists and its\r\n * implementation.\r\n *\r\n * Some background:\r\n *   1. Accessibiliy APIs rely heavily on element IDs\r\n *   2. Requiring developers to put IDs on every element in Reach UI is both\r\n *      cumbersome and error-prone\r\n *   3. With a component model, we can generate IDs for them!\r\n *\r\n * Solution 1: Generate random IDs.\r\n *\r\n * This works great as long as you don't server render your app. When React (in\r\n * the client) tries to reuse the markup from the server, the IDs won't match\r\n * and React will then recreate the entire DOM tree.\r\n *\r\n * Solution 2: Increment an integer\r\n *\r\n * This sounds great. Since we're rendering the exact same tree on the server\r\n * and client, we can increment a counter and get a deterministic result between\r\n * client and server. Also, JS integers can go up to nine-quadrillion. I'm\r\n * pretty sure the tab will be closed before an app never needs\r\n * 10 quadrillion IDs!\r\n *\r\n * Problem solved, right?\r\n *\r\n * Ah, but there's a catch! React's concurrent rendering makes this approach\r\n * non-deterministic. While the client and server will end up with the same\r\n * elements in the end, depending on suspense boundaries (and possibly some user\r\n * input during the initial render) the incrementing integers won't always match\r\n * up.\r\n *\r\n * Solution 3: Don't use IDs at all on the server; patch after first render.\r\n *\r\n * What we've done here is solution 2 with some tricks. With this approach, the\r\n * ID returned is an empty string on the first render. This way the server and\r\n * client have the same markup no matter how wild the concurrent rendering may\r\n * have gotten.\r\n *\r\n * After the render, we patch up the components with an incremented ID. This\r\n * causes a double render on any components with `useId`. Shouldn't be a problem\r\n * since the components using this hook should be small, and we're only updating\r\n * the ID attribute on the DOM, nothing big is happening.\r\n *\r\n * It doesn't have to be an incremented number, though--we could do generate\r\n * random strings instead, but incrementing a number is probably the cheapest\r\n * thing we can do.\r\n *\r\n * Additionally, we only do this patchup on the very first client render ever.\r\n * Any calls to `useId` that happen dynamically in the client will be\r\n * populated immediately with a value. So, we only get the double render after\r\n * server hydration and never again, SO BACK OFF ALRIGHT?\r\n */\nvar serverHandoffComplete = false;\nvar id = 0;\n\nvar genId = function genId() {\n  return ++id;\n};\n/**\r\n * useId\r\n *\r\n * Autogenerate IDs to facilitate WAI-ARIA and server rendering.\r\n *\r\n * Note: The returned ID will initially be `null` and will update after a\r\n * component mounts. Users may need to supply their own ID if they need\r\n * consistent values for SSR.\r\n *\r\n * @see Docs https://reach.tech/auto-id\r\n */\n\n\nvar useId = function useId(idFromProps) {\n  /*\r\n   * If this instance isn't part of the initial render, we don't have to do the\r\n   * double render/patch-up dance. We can just generate the ID and return it.\r\n   */\n  var initialId = idFromProps || (serverHandoffComplete ? genId() : null);\n\n  var _useState = (0, _react.useState)(initialId),\n      id = _useState[0],\n      setId = _useState[1];\n\n  (0, _utils.useIsomorphicLayoutEffect)(function () {\n    if (id === null) {\n      /*\r\n       * Patch the ID after render. We do this in `useLayoutEffect` to avoid any\r\n       * rendering flicker, though it'll make the first render slower (unlikely\r\n       * to matter, but you're welcome to measure your app and let us know if\r\n       * it's a problem).\r\n       */\n      setId(genId());\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n  (0, _react.useEffect)(function () {\n    if (serverHandoffComplete === false) {\n      /*\r\n       * Flag all future uses of `useId` to skip the update dance. This is in\r\n       * `useEffect` because it goes after `useLayoutEffect`, ensuring we don't\r\n       * accidentally bail out of the patch-up dance prematurely.\r\n       */\n      serverHandoffComplete = true;\n    }\n  }, []);\n  return id != null ? String(id) : undefined;\n};\n\nexports.useId = useId;"},"sourceMaps":{"js":{"mappings":[{"source":"../src/index.tsx","name":null,"original":{"line":1,"column":0},"generated":{"line":12,"column":0}},{"source":"../src/index.tsx","name":null,"original":{"line":60,"column":0},"generated":{"line":67,"column":0}},{"source":"../src/index.tsx","name":"serverHandoffComplete","original":{"line":60,"column":4},"generated":{"line":67,"column":4}},{"source":"../src/index.tsx","name":null,"original":{"line":60,"column":25},"generated":{"line":67,"column":25}},{"source":"../src/index.tsx","name":null,"original":{"line":60,"column":28},"generated":{"line":67,"column":28}},{"source":"../src/index.tsx","name":null,"original":{"line":60,"column":0},"generated":{"line":67,"column":33}},{"source":"../src/index.tsx","name":null,"original":{"line":61,"column":0},"generated":{"line":68,"column":0}},{"source":"../src/index.tsx","name":"id","original":{"line":61,"column":4},"generated":{"line":68,"column":4}},{"source":"../src/index.tsx","name":null,"original":{"line":61,"column":6},"generated":{"line":68,"column":6}},{"source":"../src/index.tsx","name":null,"original":{"line":61,"column":9},"generated":{"line":68,"column":9}},{"source":"../src/index.tsx","name":null,"original":{"line":61,"column":0},"generated":{"line":68,"column":10}},{"source":"../src/index.tsx","name":null,"original":{"line":62,"column":0},"generated":{"line":70,"column":0}},{"source":"../src/index.tsx","name":"genId","original":{"line":62,"column":6},"generated":{"line":70,"column":4}},{"source":"../src/index.tsx","name":null,"original":{"line":62,"column":11},"generated":{"line":70,"column":9}},{"source":"../src/index.tsx","name":null,"original":{"line":62,"column":14},"generated":{"line":70,"column":12}},{"source":"../src/index.tsx","name":"genId","original":{"line":62,"column":6},"generated":{"line":70,"column":21}},{"source":"../src/index.tsx","name":null,"original":{"line":62,"column":14},"generated":{"line":70,"column":26}},{"source":"../src/index.tsx","name":null,"original":{"line":62,"column":14},"generated":{"line":70,"column":29}},{"source":"../src/index.tsx","name":null,"original":{"line":62,"column":14},"generated":{"line":71,"column":0}},{"source":"../src/index.tsx","name":null,"original":{"line":62,"column":20},"generated":{"line":71,"column":9}},{"source":"../src/index.tsx","name":"id","original":{"line":62,"column":22},"generated":{"line":71,"column":11}},{"source":"../src/index.tsx","name":null,"original":{"line":62,"column":14},"generated":{"line":71,"column":13}},{"source":"../src/index.tsx","name":null,"original":{"line":62,"column":0},"generated":{"line":72,"column":0}},{"source":"../src/index.tsx","name":null,"original":{"line":62,"column":0},"generated":{"line":72,"column":1}},{"source":"../src/index.tsx","name":null,"original":{"line":64,"column":0},"generated":{"line":73,"column":0}},{"source":"../src/index.tsx","name":"useId","original":{"line":75,"column":13},"generated":{"line":86,"column":4}},{"source":"../src/index.tsx","name":null,"original":{"line":75,"column":18},"generated":{"line":86,"column":9}},{"source":"../src/index.tsx","name":null,"original":{"line":75,"column":21},"generated":{"line":86,"column":12}},{"source":"../src/index.tsx","name":"useId","original":{"line":75,"column":13},"generated":{"line":86,"column":21}},{"source":"../src/index.tsx","name":null,"original":{"line":75,"column":21},"generated":{"line":86,"column":26}},{"source":"../src/index.tsx","name":"idFromProps","original":{"line":75,"column":22},"generated":{"line":86,"column":27}},{"source":"../src/index.tsx","name":null,"original":{"line":75,"column":21},"generated":{"line":86,"column":38}},{"source":"../src/index.tsx","name":null,"original":{"line":75,"column":21},"generated":{"line":86,"column":40}},{"source":"../src/index.tsx","name":null,"original":{"line":76,"column":2},"generated":{"line":87,"column":0}},{"source":"../src/index.tsx","name":null,"original":{"line":80,"column":2},"generated":{"line":91,"column":0}},{"source":"../src/index.tsx","name":"initialId","original":{"line":80,"column":8},"generated":{"line":91,"column":6}},{"source":"../src/index.tsx","name":null,"original":{"line":80,"column":17},"generated":{"line":91,"column":15}},{"source":"../src/index.tsx","name":"idFromProps","original":{"line":80,"column":20},"generated":{"line":91,"column":18}},{"source":"../src/index.tsx","name":null,"original":{"line":80,"column":31},"generated":{"line":91,"column":29}},{"source":"../src/index.tsx","name":"serverHandoffComplete","original":{"line":80,"column":36},"generated":{"line":91,"column":34}},{"source":"../src/index.tsx","name":null,"original":{"line":80,"column":57},"generated":{"line":91,"column":55}},{"source":"../src/index.tsx","name":"genId","original":{"line":80,"column":60},"generated":{"line":91,"column":58}},{"source":"../src/index.tsx","name":null,"original":{"line":80,"column":65},"generated":{"line":91,"column":63}},{"source":"../src/index.tsx","name":null,"original":{"line":80,"column":57},"generated":{"line":91,"column":65}},{"source":"../src/index.tsx","name":null,"original":{"line":80,"column":70},"generated":{"line":91,"column":68}},{"source":"../src/index.tsx","name":null,"original":{"line":80,"column":31},"generated":{"line":91,"column":72}},{"source":"../src/index.tsx","name":null,"original":{"line":80,"column":2},"generated":{"line":91,"column":73}},{"source":"../src/index.tsx","name":"useState","original":{"line":82,"column":22},"generated":{"line":93,"column":18}},{"source":"../src/index.tsx","name":"initialId","original":{"line":82,"column":31},"generated":{"line":93,"column":39}},{"source":"../src/index.tsx","name":"useState","original":{"line":82,"column":22},"generated":{"line":93,"column":48}},{"source":"../src/index.tsx","name":"id","original":{"line":82,"column":9},"generated":{"line":94,"column":6}},{"source":"../src/index.tsx","name":"id","original":{"line":82,"column":9},"generated":{"line":94,"column":8}},{"source":"../src/index.tsx","name":"id","original":{"line":82,"column":9},"generated":{"line":94,"column":11}},{"source":"../src/index.tsx","name":"id","original":{"line":82,"column":9},"generated":{"line":94,"column":20}},{"source":"../src/index.tsx","name":"id","original":{"line":82,"column":9},"generated":{"line":94,"column":21}},{"source":"../src/index.tsx","name":"id","original":{"line":82,"column":9},"generated":{"line":94,"column":22}},{"source":"../src/index.tsx","name":"setId","original":{"line":82,"column":13},"generated":{"line":95,"column":6}},{"source":"../src/index.tsx","name":"setId","original":{"line":82,"column":13},"generated":{"line":95,"column":11}},{"source":"../src/index.tsx","name":"setId","original":{"line":82,"column":13},"generated":{"line":95,"column":14}},{"source":"../src/index.tsx","name":"setId","original":{"line":82,"column":13},"generated":{"line":95,"column":23}},{"source":"../src/index.tsx","name":"setId","original":{"line":82,"column":13},"generated":{"line":95,"column":24}},{"source":"../src/index.tsx","name":"setId","original":{"line":82,"column":13},"generated":{"line":95,"column":25}},{"source":"../src/index.tsx","name":"useIsomorphicLayoutEffect","original":{"line":84,"column":2},"generated":{"line":97,"column":0}},{"source":"../src/index.tsx","name":null,"original":{"line":84,"column":28},"generated":{"line":97,"column":40}},{"source":"../src/index.tsx","name":null,"original":{"line":84,"column":28},"generated":{"line":97,"column":52}},{"source":"../src/index.tsx","name":null,"original":{"line":85,"column":4},"generated":{"line":98,"column":0}},{"source":"../src/index.tsx","name":"id","original":{"line":85,"column":8},"generated":{"line":98,"column":8}},{"source":"../src/index.tsx","name":null,"original":{"line":85,"column":10},"generated":{"line":98,"column":10}},{"source":"../src/index.tsx","name":null,"original":{"line":85,"column":15},"generated":{"line":98,"column":15}},{"source":"../src/index.tsx","name":null,"original":{"line":85,"column":4},"generated":{"line":98,"column":19}},{"source":"../src/index.tsx","name":null,"original":{"line":85,"column":21},"generated":{"line":98,"column":21}},{"source":"../src/index.tsx","name":null,"original":{"line":86,"column":6},"generated":{"line":99,"column":0}},{"source":"../src/index.tsx","name":"setId","original":{"line":92,"column":6},"generated":{"line":105,"column":0}},{"source":"../src/index.tsx","name":"setId","original":{"line":92,"column":6},"generated":{"line":105,"column":6}},{"source":"../src/index.tsx","name":null,"original":{"line":92,"column":11},"generated":{"line":105,"column":11}},{"source":"../src/index.tsx","name":"genId","original":{"line":92,"column":12},"generated":{"line":105,"column":12}},{"source":"../src/index.tsx","name":null,"original":{"line":92,"column":17},"generated":{"line":105,"column":17}},{"source":"../src/index.tsx","name":null,"original":{"line":92,"column":11},"generated":{"line":105,"column":19}},{"source":"../src/index.tsx","name":"setId","original":{"line":92,"column":6},"generated":{"line":105,"column":20}},{"source":"../src/index.tsx","name":null,"original":{"line":93,"column":5},"generated":{"line":106,"column":0}},{"source":"../src/index.tsx","name":null,"original":{"line":84,"column":28},"generated":{"line":106,"column":5}},{"source":"../src/index.tsx","name":null,"original":{"line":93,"column":5},"generated":{"line":106,"column":6}},{"source":"../src/index.tsx","name":null,"original":{"line":84,"column":27},"generated":{"line":108,"column":0}},{"source":"../src/index.tsx","name":"useIsomorphicLayoutEffect","original":{"line":84,"column":2},"generated":{"line":108,"column":3}},{"source":"../src/index.tsx","name":null,"original":{"line":95,"column":5},"generated":{"line":108,"column":5}},{"source":"../src/index.tsx","name":"useIsomorphicLayoutEffect","original":{"line":84,"column":2},"generated":{"line":108,"column":7}},{"source":"../src/index.tsx","name":"useEffect","original":{"line":97,"column":2},"generated":{"line":109,"column":0}},{"source":"../src/index.tsx","name":null,"original":{"line":97,"column":12},"generated":{"line":109,"column":24}},{"source":"../src/index.tsx","name":null,"original":{"line":97,"column":12},"generated":{"line":109,"column":36}},{"source":"../src/index.tsx","name":null,"original":{"line":98,"column":4},"generated":{"line":110,"column":0}},{"source":"../src/index.tsx","name":"serverHandoffComplete","original":{"line":98,"column":8},"generated":{"line":110,"column":8}},{"source":"../src/index.tsx","name":null,"original":{"line":98,"column":29},"generated":{"line":110,"column":29}},{"source":"../src/index.tsx","name":null,"original":{"line":98,"column":34},"generated":{"line":110,"column":34}},{"source":"../src/index.tsx","name":null,"original":{"line":98,"column":4},"generated":{"line":110,"column":39}},{"source":"../src/index.tsx","name":null,"original":{"line":98,"column":41},"generated":{"line":110,"column":41}},{"source":"../src/index.tsx","name":null,"original":{"line":99,"column":6},"generated":{"line":111,"column":0}},{"source":"../src/index.tsx","name":"serverHandoffComplete","original":{"line":104,"column":6},"generated":{"line":116,"column":0}},{"source":"../src/index.tsx","name":"serverHandoffComplete","original":{"line":104,"column":6},"generated":{"line":116,"column":6}},{"source":"../src/index.tsx","name":null,"original":{"line":104,"column":27},"generated":{"line":116,"column":27}},{"source":"../src/index.tsx","name":null,"original":{"line":104,"column":30},"generated":{"line":116,"column":30}},{"source":"../src/index.tsx","name":"serverHandoffComplete","original":{"line":104,"column":6},"generated":{"line":116,"column":34}},{"source":"../src/index.tsx","name":null,"original":{"line":105,"column":5},"generated":{"line":117,"column":0}},{"source":"../src/index.tsx","name":null,"original":{"line":97,"column":11},"generated":{"line":118,"column":0}},{"source":"../src/index.tsx","name":"useEffect","original":{"line":97,"column":2},"generated":{"line":118,"column":3}},{"source":"../src/index.tsx","name":null,"original":{"line":106,"column":5},"generated":{"line":118,"column":5}},{"source":"../src/index.tsx","name":"useEffect","original":{"line":97,"column":2},"generated":{"line":118,"column":7}},{"source":"../src/index.tsx","name":null,"original":{"line":107,"column":2},"generated":{"line":119,"column":0}},{"source":"../src/index.tsx","name":"id","original":{"line":107,"column":9},"generated":{"line":119,"column":9}},{"source":"../src/index.tsx","name":null,"original":{"line":107,"column":11},"generated":{"line":119,"column":11}},{"source":"../src/index.tsx","name":null,"original":{"line":107,"column":15},"generated":{"line":119,"column":15}},{"source":"../src/index.tsx","name":"id","original":{"line":107,"column":9},"generated":{"line":119,"column":19}},{"source":"../src/index.tsx","name":"String","original":{"line":107,"column":22},"generated":{"line":119,"column":22}},{"source":"../src/index.tsx","name":null,"original":{"line":107,"column":28},"generated":{"line":119,"column":28}},{"source":"../src/index.tsx","name":"id","original":{"line":107,"column":29},"generated":{"line":119,"column":29}},{"source":"../src/index.tsx","name":null,"original":{"line":107,"column":28},"generated":{"line":119,"column":31}},{"source":"../src/index.tsx","name":"id","original":{"line":107,"column":9},"generated":{"line":119,"column":32}},{"source":"../src/index.tsx","name":"undefined","original":{"line":107,"column":35},"generated":{"line":119,"column":35}},{"source":"../src/index.tsx","name":null,"original":{"line":107,"column":2},"generated":{"line":119,"column":44}},{"source":"../src/index.tsx","name":null,"original":{"line":108,"column":1},"generated":{"line":120,"column":0}}],"sources":{"../src/index.tsx":"/*\n * Welcome to @reach/auto-id!\n\n * Let's see if we can make sense of why this hook exists and its\n * implementation.\n *\n * Some background:\n *   1. Accessibiliy APIs rely heavily on element IDs\n *   2. Requiring developers to put IDs on every element in Reach UI is both\n *      cumbersome and error-prone\n *   3. With a component model, we can generate IDs for them!\n *\n * Solution 1: Generate random IDs.\n *\n * This works great as long as you don't server render your app. When React (in\n * the client) tries to reuse the markup from the server, the IDs won't match\n * and React will then recreate the entire DOM tree.\n *\n * Solution 2: Increment an integer\n *\n * This sounds great. Since we're rendering the exact same tree on the server\n * and client, we can increment a counter and get a deterministic result between\n * client and server. Also, JS integers can go up to nine-quadrillion. I'm\n * pretty sure the tab will be closed before an app never needs\n * 10 quadrillion IDs!\n *\n * Problem solved, right?\n *\n * Ah, but there's a catch! React's concurrent rendering makes this approach\n * non-deterministic. While the client and server will end up with the same\n * elements in the end, depending on suspense boundaries (and possibly some user\n * input during the initial render) the incrementing integers won't always match\n * up.\n *\n * Solution 3: Don't use IDs at all on the server; patch after first render.\n *\n * What we've done here is solution 2 with some tricks. With this approach, the\n * ID returned is an empty string on the first render. This way the server and\n * client have the same markup no matter how wild the concurrent rendering may\n * have gotten.\n *\n * After the render, we patch up the components with an incremented ID. This\n * causes a double render on any components with `useId`. Shouldn't be a problem\n * since the components using this hook should be small, and we're only updating\n * the ID attribute on the DOM, nothing big is happening.\n *\n * It doesn't have to be an incremented number, though--we could do generate\n * random strings instead, but incrementing a number is probably the cheapest\n * thing we can do.\n *\n * Additionally, we only do this patchup on the very first client render ever.\n * Any calls to `useId` that happen dynamically in the client will be\n * populated immediately with a value. So, we only get the double render after\n * server hydration and never again, SO BACK OFF ALRIGHT?\n */\n\nimport { useState, useEffect } from \"react\";\nimport { useIsomorphicLayoutEffect } from \"@reach/utils\";\n\nlet serverHandoffComplete = false;\nlet id = 0;\nconst genId = () => ++id;\n\n/**\n * useId\n *\n * Autogenerate IDs to facilitate WAI-ARIA and server rendering.\n *\n * Note: The returned ID will initially be `null` and will update after a\n * component mounts. Users may need to supply their own ID if they need\n * consistent values for SSR.\n *\n * @see Docs https://reach.tech/auto-id\n */\nexport const useId = (idFromProps?: string | null) => {\n  /*\n   * If this instance isn't part of the initial render, we don't have to do the\n   * double render/patch-up dance. We can just generate the ID and return it.\n   */\n  const initialId = idFromProps || (serverHandoffComplete ? genId() : null);\n\n  const [id, setId] = useState(initialId);\n\n  useIsomorphicLayoutEffect(() => {\n    if (id === null) {\n      /*\n       * Patch the ID after render. We do this in `useLayoutEffect` to avoid any\n       * rendering flicker, though it'll make the first render slower (unlikely\n       * to matter, but you're welcome to measure your app and let us know if\n       * it's a problem).\n       */\n      setId(genId());\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    if (serverHandoffComplete === false) {\n      /*\n       * Flag all future uses of `useId` to skip the update dance. This is in\n       * `useEffect` because it goes after `useLayoutEffect`, ensuring we don't\n       * accidentally bail out of the patch-up dance prematurely.\n       */\n      serverHandoffComplete = true;\n    }\n  }, []);\n  return id != null ? String(id) : undefined;\n};\n"},"lineCount":null}},"error":null,"hash":"14acff90eeb17b49b5bc9ce5b59be02a","cacheData":{"env":{}}}